/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.Author;
import com.rappi.bitbucket.client.model.BaseCommit;
import com.rappi.bitbucket.client.model.IssueContent;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * BaseCommit
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class BaseCommit extends Object {
  @JsonProperty("hash")
  private String hash = null;

  @JsonProperty("date")
  private OffsetDateTime date = null;

  @JsonProperty("author")
  private Author author = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("summary")
  private IssueContent summary = null;

  @JsonProperty("parents")
  private List<BaseCommit> parents = null;

  public BaseCommit hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Get hash
   * @return hash
  **/
  @Schema(description = "")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public BaseCommit date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @Schema(description = "")
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }

  public BaseCommit author(Author author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @Schema(description = "")
  public Author getAuthor() {
    return author;
  }

  public void setAuthor(Author author) {
    this.author = author;
  }

  public BaseCommit message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public BaseCommit summary(IssueContent summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @Schema(description = "")
  public IssueContent getSummary() {
    return summary;
  }

  public void setSummary(IssueContent summary) {
    this.summary = summary;
  }

  public BaseCommit parents(List<BaseCommit> parents) {
    this.parents = parents;
    return this;
  }

  public BaseCommit addParentsItem(BaseCommit parentsItem) {
    if (this.parents == null) {
      this.parents = new ArrayList<BaseCommit>();
    }
    this.parents.add(parentsItem);
    return this;
  }

   /**
   * Get parents
   * @return parents
  **/
  @Schema(description = "")
  public List<BaseCommit> getParents() {
    return parents;
  }

  public void setParents(List<BaseCommit> parents) {
    this.parents = parents;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseCommit baseCommit = (BaseCommit) o;
    return Objects.equals(this.hash, baseCommit.hash) &&
        Objects.equals(this.date, baseCommit.date) &&
        Objects.equals(this.author, baseCommit.author) &&
        Objects.equals(this.message, baseCommit.message) &&
        Objects.equals(this.summary, baseCommit.summary) &&
        Objects.equals(this.parents, baseCommit.parents) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, date, author, message, summary, parents, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseCommit {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    parents: ").append(toIndentedString(parents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
