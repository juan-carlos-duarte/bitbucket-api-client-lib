/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.api;

import com.rappi.bitbucket.client.model.Error;
import com.rappi.bitbucket.client.model.PaginatedHookEvents;
import com.rappi.bitbucket.client.model.PaginatedWebhookSubscriptions;
import com.rappi.bitbucket.client.model.SubjectTypes;
import com.rappi.bitbucket.client.model.WebhookSubscription;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Ignore
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * 
     *
     * Returns the webhook resource or subject types on which webhooks can be registered.  Each resource/subject type contains an &#x60;events&#x60; link that returns the paginated list of specific events each individual subject type can emit.  This endpoint is publicly accessible and does not require authentication or scopes.  Example:  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/hook_events  {     \&quot;repository\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/repository\&quot;             }         }     },     \&quot;team\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/team\&quot;             }         }     },     \&quot;user\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/user\&quot;             }         }     } } &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hookEventsGetTest() {
        SubjectTypes response = api.hookEventsGet();

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a paginated list of all valid webhook events for the specified entity.  This is public data that does not require any scopes or authentication.  Example:  NOTE: The following example is a truncated response object for the &#x60;team&#x60; &#x60;subject_type&#x60;. We return the same structure for the other &#x60;subject_type&#x60; objects.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/hook_events/team {     \&quot;page\&quot;: 1,     \&quot;pagelen\&quot;: 30,     \&quot;size\&quot;: 21,     \&quot;values\&quot;: [         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository push occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:push\&quot;,             \&quot;label\&quot;: \&quot;Push\&quot;         },         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository fork occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:fork\&quot;,             \&quot;label\&quot;: \&quot;Fork\&quot;         },         ...         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository import occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:imported\&quot;,             \&quot;label\&quot;: \&quot;Import\&quot;         }     ] } &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hookEventsSubjectTypeGetTest() {
        String subjectType = null;
        PaginatedHookEvents response = api.hookEventsSubjectTypeGet(subjectType);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a paginated list of webhooks installed on this repository.  The teams endpoint for projects has been deprecated, and you should ensure you are using the workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksGetTest() {
        String repoSlug = null;
        String workspace = null;
        PaginatedWebhookSubscriptions response = api.repositoriesWorkspaceRepoSlugHooksGet(repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new webhook on the specified repository.  The teams endpoint for projects has been deprecated, and you should ensure you are using the workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).  Example:  &#x60;&#x60;&#x60; $ curl -X POST -u credentials -H &#x27;Content-Type: application/json&#x27;           https://api.bitbucket.org/2.0/repositories/username/slug/hooks           -d &#x27;     {       \&quot;description\&quot;: \&quot;Webhook Description\&quot;,       \&quot;url\&quot;: \&quot;https://example.com/\&quot;,       \&quot;active\&quot;: true,       \&quot;events\&quot;: [         \&quot;repo:push\&quot;,         \&quot;issue:created\&quot;,         \&quot;issue:updated\&quot;       ]     }&#x27; &#x60;&#x60;&#x60;  Note that this call requires the webhook scope, as well as any scope that applies to the events that the webhook subscribes to. In the example above that means: &#x60;webhook&#x60;, &#x60;repository&#x60; and &#x60;issue&#x60;.  Also note that the &#x60;url&#x60; must properly resolve and cannot be an internal, non-routed address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksPostTest() {
        String repoSlug = null;
        String workspace = null;
        WebhookSubscription response = api.repositoriesWorkspaceRepoSlugHooksPost(repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the specified webhook subscription from the given repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksUidDeleteTest() {
        String repoSlug = null;
        String workspace = null;
        String uid = null;
        api.repositoriesWorkspaceRepoSlugHooksUidDelete(repoSlug, workspace, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the webhook with the specified id installed on the specified repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksUidGetTest() {
        String repoSlug = null;
        String workspace = null;
        String uid = null;
        WebhookSubscription response = api.repositoriesWorkspaceRepoSlugHooksUidGet(repoSlug, workspace, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksUidPutTest() {
        String repoSlug = null;
        String workspace = null;
        String uid = null;
        WebhookSubscription response = api.repositoriesWorkspaceRepoSlugHooksUidPut(repoSlug, workspace, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a paginated list of webhooks installed on this team.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsUsernameHooksGetTest() {
        String username = null;
        PaginatedWebhookSubscriptions response = api.teamsUsernameHooksGet(username);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new webhook on the specified team.  Team webhooks are fired for events from all repositories belonging to that team account.  Note that only admins can install webhooks on teams.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsUsernameHooksPostTest() {
        String username = null;
        WebhookSubscription response = api.teamsUsernameHooksPost(username);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the specified webhook subscription from the given team account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsUsernameHooksUidDeleteTest() {
        String username = null;
        String uid = null;
        api.teamsUsernameHooksUidDelete(username, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the webhook with the specified id installed on the given team account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsUsernameHooksUidGetTest() {
        String username = null;
        String uid = null;
        WebhookSubscription response = api.teamsUsernameHooksUidGet(username, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsUsernameHooksUidPutTest() {
        String username = null;
        String uid = null;
        WebhookSubscription response = api.teamsUsernameHooksUidPut(username, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a paginated list of webhooks installed on this user account.  Note that the username path parameter has been deprecated due to [privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis). Use the account&#x27;s UUID or account_id instead.  Also note that the users endpoint has been deprecated, and the workspaces endpoint should be used instead. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersSelectedUserHooksGetTest() {
        String selectedUser = null;
        PaginatedWebhookSubscriptions response = api.usersSelectedUserHooksGet(selectedUser);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new webhook on the specified user account.  Account-level webhooks are fired for events from all repositories belonging to that account.  Note that one can only register webhooks on one&#x27;s own account, not that of others.  Also, note that the username path parameter has been deprecated due to [privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis). Use the account&#x27;s UUID or account_id instead.  The users endpoints have been deprecated, and the workspaces endpoint should be used instead. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersSelectedUserHooksPostTest() {
        String selectedUser = null;
        WebhookSubscription response = api.usersSelectedUserHooksPost(selectedUser);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the specified webhook subscription from the given user account.  Note that the username path parameter has been deprecated due to [privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis). Use the account&#x27;s UUID or account_id instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersSelectedUserHooksUidDeleteTest() {
        String selectedUser = null;
        String uid = null;
        api.usersSelectedUserHooksUidDelete(selectedUser, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the webhook with the specified id installed on the given user account.  Note that the username path parameter has been deprecated due to [privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis). Use the account&#x27;s UUID or account_id instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersSelectedUserHooksUidGetTest() {
        String selectedUser = null;
        String uid = null;
        WebhookSubscription response = api.usersSelectedUserHooksUidGet(selectedUser, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;  Note that the username path parameter has been deprecated due to [privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis). Use the account&#x27;s UUID or account_id instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersSelectedUserHooksUidPutTest() {
        String selectedUser = null;
        String uid = null;
        WebhookSubscription response = api.usersSelectedUserHooksUidPut(selectedUser, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a paginated list of webhooks installed on this workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksGetTest() {
        String workspace = null;
        PaginatedWebhookSubscriptions response = api.workspacesWorkspaceHooksGet(workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new webhook on the specified workspace.  Workspace webhooks are fired for events from all repositories contained by that workspace.  Note that only owners can install webhooks on workspaces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksPostTest() {
        String workspace = null;
        WebhookSubscription response = api.workspacesWorkspaceHooksPost(workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the specified webhook subscription from the given workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksUidDeleteTest() {
        String workspace = null;
        String uid = null;
        api.workspacesWorkspaceHooksUidDelete(workspace, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the webhook with the specified id installed on the given workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksUidGetTest() {
        String workspace = null;
        String uid = null;
        WebhookSubscription response = api.workspacesWorkspaceHooksUidGet(workspace, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksUidPutTest() {
        String workspace = null;
        String uid = null;
        WebhookSubscription response = api.workspacesWorkspaceHooksUidPut(workspace, uid);

        // TODO: test validations
    }
}
