/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.api;

import com.rappi.bitbucket.client.model.Error;
import com.rappi.bitbucket.client.model.PaginatedAnnotations;
import com.rappi.bitbucket.client.model.PaginatedReports;
import com.rappi.bitbucket.client.model.Report;
import com.rappi.bitbucket.client.model.ReportAnnotation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Ignore
public class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    /**
     * 
     *
     * Bulk upload of annotations. Annotations are individual findings that have been identified as part of a report, for example, a line of code that represents a vulnerability. These annotations can be attached to a specific file and even a specific line in that file, however, that is optional. Annotations are not mandatory and a report can contain up to 1000 annotations.  Add the annotations you want to upload as objects in a JSON array and make sure each annotation has the external_id field set to a unique value. If you want to use an existing id from your own system, we recommend prefixing it with your system&#x27;s name to avoid collisions, for example, mySystem-annotation001. The external id can later be used to identify the report as an alternative to the generated [UUID](https://developer.atlassian.com/bitbucket/api/2/reference/meta/uri-uuid#uuid). You can upload up to 100 annotations per POST request.  ### Sample cURL request: &#x60;&#x60;&#x60; curl --location &#x27;https://api.bitbucket.org/2.0/repositories/&lt;username&gt;/&lt;reposity-name&gt;/commit/&lt;commit-hash&gt;/reports/mysystem-001/annotations&#x27; \\ --header &#x27;Content-Type: application/json&#x27; \\ --data-raw &#x27;[   {         \&quot;external_id\&quot;: \&quot;mysystem-annotation001\&quot;,         \&quot;title\&quot;: \&quot;Security scan report\&quot;,         \&quot;annotation_type\&quot;: \&quot;VULNERABILITY\&quot;,         \&quot;summary\&quot;: \&quot;This line represents a security threat.\&quot;,         \&quot;severity\&quot;: \&quot;HIGH\&quot;,       \&quot;path\&quot;: \&quot;my-service/src/main/java/com/myCompany/mysystem/logic/Main.java\&quot;,         \&quot;line\&quot;: 42   },   {         \&quot;external_id\&quot;: \&quot;mySystem-annotation002\&quot;,         \&quot;title\&quot;: \&quot;Bug report\&quot;,         \&quot;annotation_type\&quot;: \&quot;BUG\&quot;,         \&quot;result\&quot;: \&quot;FAILED\&quot;,         \&quot;summary\&quot;: \&quot;This line might introduce a bug.\&quot;,         \&quot;severity\&quot;: \&quot;MEDIUM\&quot;,       \&quot;path\&quot;: \&quot;my-service/src/main/java/com/myCompany/mysystem/logic/Helper.java\&quot;,         \&quot;line\&quot;: 13   } ]&#x27; &#x60;&#x60;&#x60;  ### Possible field values: annotation_type: VULNERABILITY, CODE_SMELL, BUG result: PASSED, FAILED, IGNORED, SKIPPED severity: HIGH, MEDIUM, LOW, CRITICAL  Please refer to the [Code Insights documentation](https://confluence.atlassian.com/bitbucket/code-insights-994316785.html) for more information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bulkCreateOrUpdateAnnotationsTest() {
        List<ReportAnnotation> body = null;
        String username = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        List<ReportAnnotation> response = api.bulkCreateOrUpdateAnnotations(body, username, repoSlug, commit, reportId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates or updates an individual annotation for the specified report. Annotations are individual findings that have been identified as part of a report, for example, a line of code that represents a vulnerability. These annotations can be attached to a specific file and even a specific line in that file, however, that is optional. Annotations are not mandatory and a report can contain up to 1000 annotations.  Just as reports, annotation needs to be uploaded with a unique ID that can later be used to identify the report as an alternative to the generated [UUID](https://developer.atlassian.com/bitbucket/api/2/reference/meta/uri-uuid#uuid). If you want to use an existing id from your own system, we recommend prefixing it with your system&#x27;s name to avoid collisions, for example, mySystem-annotation001.  ### Sample cURL request: &#x60;&#x60;&#x60; curl --request PUT &#x27;https://api.bitbucket.org/2.0/repositories/&lt;username&gt;/&lt;reposity-name&gt;/commit/&lt;commit-hash&gt;/reports/mySystem-001/annotations/mysystem-annotation001&#x27; \\ --header &#x27;Content-Type: application/json&#x27; \\ --data-raw &#x27;{     \&quot;title\&quot;: \&quot;Security scan report\&quot;,     \&quot;annotation_type\&quot;: \&quot;VULNERABILITY\&quot;,     \&quot;summary\&quot;: \&quot;This line represents a security thread.\&quot;,     \&quot;severity\&quot;: \&quot;HIGH\&quot;,     \&quot;path\&quot;: \&quot;my-service/src/main/java/com/myCompany/mysystem/logic/Main.java\&quot;,     \&quot;line\&quot;: 42 }&#x27; &#x60;&#x60;&#x60;  ### Possible field values: annotation_type: VULNERABILITY, CODE_SMELL, BUG result: PASSED, FAILED, IGNORED, SKIPPED severity: HIGH, MEDIUM, LOW, CRITICAL  Please refer to the [Code Insights documentation](https://confluence.atlassian.com/bitbucket/code-insights-994316785.html) for more information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateAnnotationTest() {
        ReportAnnotation body = null;
        String username = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        String annotationId = null;
        ReportAnnotation response = api.createOrUpdateAnnotation(body, username, repoSlug, commit, reportId, annotationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates or updates a report for the specified commit. To upload a report, make sure to generate an ID that is unique across all reports for that commit. If you want to use an existing id from your own system, we recommend prefixing it with your system&#x27;s name to avoid collisions, for example, mySystem-001.  ### Sample cURL request: &#x60;&#x60;&#x60; curl --request PUT &#x27;https://api.bitbucket.org/2.0/repositories/&lt;username&gt;/&lt;reposity-name&gt;/commit/&lt;commit-hash&gt;/reports/mysystem-001&#x27; \\ --header &#x27;Content-Type: application/json&#x27; \\ --data-raw &#x27;{     \&quot;title\&quot;: \&quot;Security scan report\&quot;,     \&quot;details\&quot;: \&quot;This pull request introduces 10 new dependency vulnerabilities.\&quot;,     \&quot;report_type\&quot;: \&quot;SECURITY\&quot;,     \&quot;reporter\&quot;: \&quot;mySystem\&quot;,     \&quot;link\&quot;: \&quot;http://www.mysystem.com/reports/001\&quot;,     \&quot;result\&quot;: \&quot;FAILED\&quot;,     \&quot;data\&quot;: [         {             \&quot;title\&quot;: \&quot;Duration (seconds)\&quot;,             \&quot;type\&quot;: \&quot;DURATION\&quot;,             \&quot;value\&quot;: 14         },         {             \&quot;title\&quot;: \&quot;Safe to merge?\&quot;,             \&quot;type\&quot;: \&quot;BOOLEAN\&quot;,             \&quot;value\&quot;: false         }     ] }&#x27; &#x60;&#x60;&#x60;  ### Possible field values: report_type: SECURITY, COVERAGE, TEST, BUG result: PASSED, FAILED, PENDING data.type: BOOLEAN, DATE, DURATION, LINK, NUMBER, PERCENTAGE, TEXT  Please refer to the [Code Insights documentation](https://confluence.atlassian.com/bitbucket/code-insights-994316785.html) for more information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateReportTest() {
        Report body = null;
        String username = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        Report response = api.createOrUpdateReport(body, username, repoSlug, commit, reportId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes a single Annotation matching the provided ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnnotationTest() {
        String username = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        String annotationId = null;
        api.deleteAnnotation(username, repoSlug, commit, reportId, annotationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes a single Report matching the provided ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReportTest() {
        String username = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        api.deleteReport(username, repoSlug, commit, reportId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a single Annotation matching the provided ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnnotationTest() {
        String username = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        String annotationId = null;
        ReportAnnotation response = api.getAnnotation(username, repoSlug, commit, reportId, annotationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a paginated list of Annotations for a specified report.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnnotationsForReportTest() {
        String username = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        PaginatedAnnotations response = api.getAnnotationsForReport(username, repoSlug, commit, reportId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a single Report matching the provided ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportTest() {
        String username = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        Report response = api.getReport(username, repoSlug, commit, reportId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a paginated list of Reports linked to this commit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportsForCommitTest() {
        String username = null;
        String repoSlug = null;
        String commit = null;
        PaginatedReports response = api.getReportsForCommit(username, repoSlug, commit);

        // TODO: test validations
    }
}
