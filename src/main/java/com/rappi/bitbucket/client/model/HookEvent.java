/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * An event, associated with a resource or subject type.
 */
@Schema(description = "An event, associated with a resource or subject type.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class HookEvent {
  /**
   * The event identifier.
   */
  public enum EventEnum {
    PULLREQUEST_UNAPPROVED("pullrequest:unapproved"),
    ISSUE_COMMENT_CREATED("issue:comment_created"),
    PULLREQUEST_APPROVED("pullrequest:approved"),
    REPO_CREATED("repo:created"),
    REPO_DELETED("repo:deleted"),
    REPO_IMPORTED("repo:imported"),
    PULLREQUEST_COMMENT_UPDATED("pullrequest:comment_updated"),
    ISSUE_UPDATED("issue:updated"),
    PROJECT_UPDATED("project:updated"),
    PULLREQUEST_COMMENT_CREATED("pullrequest:comment_created"),
    REPO_COMMIT_STATUS_UPDATED("repo:commit_status_updated"),
    PULLREQUEST_UPDATED("pullrequest:updated"),
    ISSUE_CREATED("issue:created"),
    REPO_FORK("repo:fork"),
    PULLREQUEST_COMMENT_DELETED("pullrequest:comment_deleted"),
    REPO_COMMIT_STATUS_CREATED("repo:commit_status_created"),
    REPO_UPDATED("repo:updated"),
    PULLREQUEST_REJECTED("pullrequest:rejected"),
    PULLREQUEST_FULFILLED("pullrequest:fulfilled"),
    REPO_PUSH("repo:push"),
    PULLREQUEST_CREATED("pullrequest:created"),
    REPO_TRANSFER("repo:transfer"),
    REPO_COMMIT_COMMENT_CREATED("repo:commit_comment_created");

    private String value;

    EventEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static EventEnum fromValue(String text) {
      for (EventEnum b : EventEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("event")
  private EventEnum event = null;

  @JsonProperty("category")
  private String category = null;

  @JsonProperty("label")
  private String label = null;

  @JsonProperty("description")
  private String description = null;

  public HookEvent event(EventEnum event) {
    this.event = event;
    return this;
  }

   /**
   * The event identifier.
   * @return event
  **/
  @Schema(description = "The event identifier.")
  public EventEnum getEvent() {
    return event;
  }

  public void setEvent(EventEnum event) {
    this.event = event;
  }

  public HookEvent category(String category) {
    this.category = category;
    return this;
  }

   /**
   * The category this event belongs to.
   * @return category
  **/
  @Schema(description = "The category this event belongs to.")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public HookEvent label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Summary of the webhook event type.
   * @return label
  **/
  @Schema(description = "Summary of the webhook event type.")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public HookEvent description(String description) {
    this.description = description;
    return this;
  }

   /**
   * More detailed description of the webhook event type.
   * @return description
  **/
  @Schema(description = "More detailed description of the webhook event type.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HookEvent hookEvent = (HookEvent) o;
    return Objects.equals(this.event, hookEvent.event) &&
        Objects.equals(this.category, hookEvent.category) &&
        Objects.equals(this.label, hookEvent.label) &&
        Objects.equals(this.description, hookEvent.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(event, category, label, description);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HookEvent {\n");
    
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
