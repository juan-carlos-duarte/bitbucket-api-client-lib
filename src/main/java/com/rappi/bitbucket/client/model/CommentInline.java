/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * CommentInline
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class CommentInline {
  @JsonProperty("to")
  private Integer to = null;

  @JsonProperty("from")
  private Integer from = null;

  @JsonProperty("path")
  private String path = null;

  public CommentInline to(Integer to) {
    this.to = to;
    return this;
  }

   /**
   * The comment&#x27;s anchor line in the new version of the file. If the &#x27;from&#x27; line is also provided, this value will be removed.
   * minimum: 1
   * @return to
  **/
  @Schema(description = "The comment's anchor line in the new version of the file. If the 'from' line is also provided, this value will be removed.")
  public Integer getTo() {
    return to;
  }

  public void setTo(Integer to) {
    this.to = to;
  }

  public CommentInline from(Integer from) {
    this.from = from;
    return this;
  }

   /**
   * The comment&#x27;s anchor line in the old version of the file.
   * minimum: 1
   * @return from
  **/
  @Schema(description = "The comment's anchor line in the old version of the file.")
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }

  public CommentInline path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The path of the file this comment is anchored to.
   * @return path
  **/
  @Schema(required = true, description = "The path of the file this comment is anchored to.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentInline commentInline = (CommentInline) o;
    return Objects.equals(this.to, commentInline.to) &&
        Objects.equals(this.from, commentInline.from) &&
        Objects.equals(this.path, commentInline.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, from, path);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentInline {\n");
    
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
