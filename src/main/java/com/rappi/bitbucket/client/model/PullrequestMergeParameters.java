/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The metadata that describes a pull request merge.
 */
@Schema(description = "The metadata that describes a pull request merge.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class PullrequestMergeParameters {
  @JsonProperty("type")
  private String type = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("close_source_branch")
  private Boolean closeSourceBranch = null;

  /**
   * The merge strategy that will be used to merge the pull request.
   */
  public enum MergeStrategyEnum {
    MERGE_COMMIT("merge_commit"),
    SQUASH("squash"),
    FAST_FORWARD("fast_forward");

    private String value;

    MergeStrategyEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static MergeStrategyEnum fromValue(String text) {
      for (MergeStrategyEnum b : MergeStrategyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("merge_strategy")
  private MergeStrategyEnum mergeStrategy = MergeStrategyEnum.MERGE_COMMIT;

  public PullrequestMergeParameters type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public PullrequestMergeParameters message(String message) {
    this.message = message;
    return this;
  }

   /**
   * The commit message that will be used on the resulting commit.
   * @return message
  **/
  @Schema(description = "The commit message that will be used on the resulting commit.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public PullrequestMergeParameters closeSourceBranch(Boolean closeSourceBranch) {
    this.closeSourceBranch = closeSourceBranch;
    return this;
  }

   /**
   * Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False
   * @return closeSourceBranch
  **/
  @Schema(description = "Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False")
  public Boolean isCloseSourceBranch() {
    return closeSourceBranch;
  }

  public void setCloseSourceBranch(Boolean closeSourceBranch) {
    this.closeSourceBranch = closeSourceBranch;
  }

  public PullrequestMergeParameters mergeStrategy(MergeStrategyEnum mergeStrategy) {
    this.mergeStrategy = mergeStrategy;
    return this;
  }

   /**
   * The merge strategy that will be used to merge the pull request.
   * @return mergeStrategy
  **/
  @Schema(description = "The merge strategy that will be used to merge the pull request.")
  public MergeStrategyEnum getMergeStrategy() {
    return mergeStrategy;
  }

  public void setMergeStrategy(MergeStrategyEnum mergeStrategy) {
    this.mergeStrategy = mergeStrategy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullrequestMergeParameters pullrequestMergeParameters = (PullrequestMergeParameters) o;
    return Objects.equals(this.type, pullrequestMergeParameters.type) &&
        Objects.equals(this.message, pullrequestMergeParameters.message) &&
        Objects.equals(this.closeSourceBranch, pullrequestMergeParameters.closeSourceBranch) &&
        Objects.equals(this.mergeStrategy, pullrequestMergeParameters.mergeStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, message, closeSourceBranch, mergeStrategy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullrequestMergeParameters {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    closeSourceBranch: ").append(toIndentedString(closeSourceBranch)).append("\n");
    sb.append("    mergeStrategy: ").append(toIndentedString(mergeStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
