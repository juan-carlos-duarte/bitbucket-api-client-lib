/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.PipelineSelector;
import com.rappi.bitbucket.client.model.PipelineTarget;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;
/**
 * PipelineSchedule
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class PipelineSchedule extends Object {
  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("enabled")
  private Boolean enabled = null;

  @JsonProperty("target")
  private PipelineTarget target = null;

  @JsonProperty("selector")
  private PipelineSelector selector = null;

  @JsonProperty("cron_pattern")
  private String cronPattern = null;

  @JsonProperty("created_on")
  private OffsetDateTime createdOn = null;

  @JsonProperty("updated_on")
  private OffsetDateTime updatedOn = null;

  public PipelineSchedule uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The UUID identifying the schedule.
   * @return uuid
  **/
  @Schema(description = "The UUID identifying the schedule.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public PipelineSchedule enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the schedule is enabled.
   * @return enabled
  **/
  @Schema(description = "Whether the schedule is enabled.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public PipelineSchedule target(PipelineTarget target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @Schema(description = "")
  public PipelineTarget getTarget() {
    return target;
  }

  public void setTarget(PipelineTarget target) {
    this.target = target;
  }

  public PipelineSchedule selector(PipelineSelector selector) {
    this.selector = selector;
    return this;
  }

   /**
   * Get selector
   * @return selector
  **/
  @Schema(description = "")
  public PipelineSelector getSelector() {
    return selector;
  }

  public void setSelector(PipelineSelector selector) {
    this.selector = selector;
  }

  public PipelineSchedule cronPattern(String cronPattern) {
    this.cronPattern = cronPattern;
    return this;
  }

   /**
   * The cron expression that the schedule applies.
   * @return cronPattern
  **/
  @Schema(description = "The cron expression that the schedule applies.")
  public String getCronPattern() {
    return cronPattern;
  }

  public void setCronPattern(String cronPattern) {
    this.cronPattern = cronPattern;
  }

  public PipelineSchedule createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

   /**
   * The timestamp when the schedule was created.
   * @return createdOn
  **/
  @Schema(description = "The timestamp when the schedule was created.")
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }

  public PipelineSchedule updatedOn(OffsetDateTime updatedOn) {
    this.updatedOn = updatedOn;
    return this;
  }

   /**
   * The timestamp when the schedule was updated.
   * @return updatedOn
  **/
  @Schema(description = "The timestamp when the schedule was updated.")
  public OffsetDateTime getUpdatedOn() {
    return updatedOn;
  }

  public void setUpdatedOn(OffsetDateTime updatedOn) {
    this.updatedOn = updatedOn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineSchedule pipelineSchedule = (PipelineSchedule) o;
    return Objects.equals(this.uuid, pipelineSchedule.uuid) &&
        Objects.equals(this.enabled, pipelineSchedule.enabled) &&
        Objects.equals(this.target, pipelineSchedule.target) &&
        Objects.equals(this.selector, pipelineSchedule.selector) &&
        Objects.equals(this.cronPattern, pipelineSchedule.cronPattern) &&
        Objects.equals(this.createdOn, pipelineSchedule.createdOn) &&
        Objects.equals(this.updatedOn, pipelineSchedule.updatedOn) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, enabled, target, selector, cronPattern, createdOn, updatedOn, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineSchedule {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    cronPattern: ").append(toIndentedString(cronPattern)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    updatedOn: ").append(toIndentedString(updatedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
