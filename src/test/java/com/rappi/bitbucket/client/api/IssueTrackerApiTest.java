/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.api;

import com.rappi.bitbucket.client.model.Component;
import com.rappi.bitbucket.client.model.Error;
import com.rappi.bitbucket.client.model.Issue;
import com.rappi.bitbucket.client.model.IssueChange;
import com.rappi.bitbucket.client.model.IssueComment;
import com.rappi.bitbucket.client.model.Milestone;
import com.rappi.bitbucket.client.model.PaginatedComponents;
import com.rappi.bitbucket.client.model.PaginatedIssueAttachments;
import com.rappi.bitbucket.client.model.PaginatedIssueComments;
import com.rappi.bitbucket.client.model.PaginatedIssues;
import com.rappi.bitbucket.client.model.PaginatedLogEntries;
import com.rappi.bitbucket.client.model.PaginatedMilestones;
import com.rappi.bitbucket.client.model.PaginatedVersions;
import com.rappi.bitbucket.client.model.Version;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueTrackerApi
 */
@Ignore
public class IssueTrackerApiTest {

    private final IssueTrackerApi api = new IssueTrackerApi();

    /**
     * 
     *
     * Returns the specified issue tracker component object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugComponentsComponentIdGetTest() {
        Integer componentId = null;
        String repoSlug = null;
        String workspace = null;
        Component response = api.repositoriesWorkspaceRepoSlugComponentsComponentIdGet(componentId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the components that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugComponentsGetTest() {
        String repoSlug = null;
        String workspace = null;
        PaginatedComponents response = api.repositoriesWorkspaceRepoSlugComponentsGet(repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the issues in the issue tracker.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesGetTest() {
        String repoSlug = null;
        String workspace = null;
        PaginatedIssues response = api.repositoriesWorkspaceRepoSlugIssuesGet(repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns all attachments for this issue.  This returns the files&#x27; meta data. This does not return the files&#x27; actual contents.  The files are always ordered by their upload date.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetTest() {
        String repoSlug = null;
        String workspace = null;
        Integer issueId = null;
        PaginatedIssueAttachments response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGet(repoSlug, workspace, issueId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes an attachment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteTest() {
        String issueId = null;
        String path = null;
        String repoSlug = null;
        String workspace = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDelete(issueId, path, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the contents of the specified file attachment.  Note that this endpoint does not return a JSON response, but instead returns a redirect pointing to the actual file that in turn will return the raw contents.  The redirect URL contains a one-time token that has a limited lifetime. As a result, the link should not be persisted, stored, or shared.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetTest() {
        String issueId = null;
        String path = null;
        String repoSlug = null;
        String workspace = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGet(issueId, path, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Upload new issue attachments.  To upload files, perform a &#x60;multipart/form-data&#x60; POST containing one or more file fields.  When a file is uploaded with the same name as an existing attachment, then the existing file will be replaced.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostTest() {
        String repoSlug = null;
        String workspace = null;
        Integer issueId = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPost(repoSlug, workspace, issueId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the specified issue change object.  This resource is only available on repositories that have the issue tracker enabled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetTest() {
        String changeId = null;
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        IssueChange response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGet(changeId, issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the list of all changes that have been made to the specified issue. Changes are returned in chronological order with the oldest change first.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the &#x60;/issues/123/changes&#x60; endpoint. It also has a comment associated with the change.  Note that this operation is changing significantly, due to privacy changes. See the [announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#changes-to-the-issue-changes-api) for details.  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes - | jq .  {   \&quot;pagelen\&quot;: 20,   \&quot;values\&quot;: [     {       \&quot;changes\&quot;: {         \&quot;priority\&quot;: {           \&quot;new\&quot;: \&quot;trivial\&quot;,           \&quot;old\&quot;: \&quot;major\&quot;         },         \&quot;assignee\&quot;: {           \&quot;new\&quot;: \&quot;\&quot;,           \&quot;old\&quot;: \&quot;evzijst\&quot;         },         \&quot;assignee_account_id\&quot;: {           \&quot;new\&quot;: \&quot;\&quot;,           \&quot;old\&quot;: \&quot;557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\&quot;         },         \&quot;kind\&quot;: {           \&quot;new\&quot;: \&quot;enhancement\&quot;,           \&quot;old\&quot;: \&quot;bug\&quot;         }       },       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes/2\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow/issues/1#comment-2\&quot;         }       },       \&quot;issue\&quot;: {         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1\&quot;           }         },         \&quot;type\&quot;: \&quot;issue\&quot;,         \&quot;id\&quot;: 1,         \&quot;repository\&quot;: {           \&quot;links\&quot;: {             \&quot;self\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow\&quot;             },             \&quot;html\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow\&quot;             },             \&quot;avatar\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow/avatar/32/\&quot;             }           },           \&quot;type\&quot;: \&quot;repository\&quot;,           \&quot;name\&quot;: \&quot;dogslow\&quot;,           \&quot;full_name\&quot;: \&quot;evzijst/dogslow\&quot;,           \&quot;uuid\&quot;: \&quot;{988b17c6-1a47-4e70-84ee-854d5f012bf6}\&quot;         },         \&quot;title\&quot;: \&quot;Updated title\&quot;       },       \&quot;created_on\&quot;: \&quot;2018-03-03T00:35:28.353630+00:00\&quot;,       \&quot;user\&quot;: {         \&quot;username\&quot;: \&quot;evzijst\&quot;,         \&quot;nickname\&quot;: \&quot;evzijst\&quot;,         \&quot;display_name\&quot;: \&quot;evzijst\&quot;,         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;uuid\&quot;: \&quot;{aaa7972b-38af-4fb1-802d-6e3854c95778}\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/evzijst\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/\&quot;           },           \&quot;avatar\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/account/evzijst/avatar/32/\&quot;           }         }       },       \&quot;message\&quot;: {         \&quot;raw\&quot;: \&quot;Removed assignee, changed kind and priority.\&quot;,         \&quot;markup\&quot;: \&quot;markdown\&quot;,         \&quot;html\&quot;: \&quot;&lt;p&gt;Removed assignee, changed kind and priority.&lt;/p&gt;\&quot;,         \&quot;type\&quot;: \&quot;rendered\&quot;       },       \&quot;type\&quot;: \&quot;issue_change\&quot;,       \&quot;id\&quot;: 2     }   ],   \&quot;page\&quot;: 1 } &#x60;&#x60;&#x60;  Changes support [filtering and sorting](../../../meta/filtering) that can be used to search for specific changes. For instance, to see when an issue transitioned to \&quot;resolved\&quot;:  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/site/master/issues/1/changes \\    -G --data-urlencode&#x3D;&#x27;q&#x3D;changes.state.new &#x3D; \&quot;resolved\&quot;&#x27; &#x60;&#x60;&#x60;  This resource is only available on repositories that have the issue tracker enabled.  N.B.  The &#x60;changes.assignee&#x60; and &#x60;changes.assignee_account_id&#x60; fields are not a &#x60;user&#x60; object. Instead, they contain the raw &#x60;username&#x60; and &#x60;account_id&#x60; of the user. This is to protect the integrity of the audit log even after a user account gets deleted.  The &#x60;changes.assignee&#x60; field is deprecated will disappear in the future. Use &#x60;changes.assignee_account_id&#x60; instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        String q = null;
        String sort = null;
        PaginatedLogEntries response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGet(issueId, repoSlug, workspace, q, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Makes a change to the specified issue.  For example, to change an issue&#x27;s state and assignee, create a new change object that modifies these fields:  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/site/master/issues/1234/changes \\   -s -u evzijst -X POST -H \&quot;Content-Type: application/json\&quot; \\   -d &#x27;{     \&quot;changes\&quot;: {       \&quot;assignee_account_id\&quot;: {         \&quot;new\&quot;: \&quot;557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\&quot;       },       \&quot;state\&quot;: {         \&quot;new\&quot;: &#x27;resolved\&quot;       }     }     \&quot;message\&quot;: {       \&quot;raw\&quot;: \&quot;This is now resolved.\&quot;     }   }&#x27; &#x60;&#x60;&#x60;  The above example also includes a custom comment to go alongside the change. This comment will also be visible on the issue page in the UI.  The fields of the &#x60;changes&#x60; object are strings, not objects. This allows for immutable change log records, even after user accounts, milestones, or other objects recorded in a change entry, get renamed or deleted.  The &#x60;assignee_account_id&#x60; field stores the account id. When POSTing a new change and changing the assignee, the client should therefore use the user&#x27;s account_id in the &#x60;changes.assignee_account_id.new&#x60; field.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostTest() {
        IssueChange body = null;
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        IssueChange response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPost(body, issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the specified comment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteTest() {
        IssueComment body = null;
        String commentId = null;
        String workspace = null;
        String username = null;
        String repoSlug = null;
        String issueId = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDelete(body, commentId, workspace, username, repoSlug, issueId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the specified issue comment object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetTest() {
        String commentId = null;
        String workspace = null;
        String username = null;
        String repoSlug = null;
        String issueId = null;
        IssueComment response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGet(commentId, workspace, username, repoSlug, issueId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the content of the specified issue comment. Note that only the &#x60;content.raw&#x60; field can be modified.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/5728901 \\   -X PUT -u evzijst \\   -H &#x27;Content-Type: application/json&#x27; \\   -d &#x27;{\&quot;content\&quot;: {\&quot;raw\&quot;: \&quot;Lorem ipsum.\&quot;}&#x27; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutTest() {
        IssueComment body = null;
        String commentId = null;
        String workspace = null;
        String username = null;
        String repoSlug = null;
        String issueId = null;
        IssueComment response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPut(body, commentId, workspace, username, repoSlug, issueId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a paginated list of all comments that were made on the specified issue.  The default sorting is oldest to newest and can be overridden with the &#x60;sort&#x60; query parameter.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](../../../../../../meta/filtering) for more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetTest() {
        String issueId = null;
        String workspace = null;
        String username = null;
        String repoSlug = null;
        String q = null;
        PaginatedIssueComments response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGet(issueId, workspace, username, repoSlug, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new issue comment.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/ \\   -X POST -u evzijst \\   -H &#x27;Content-Type: application/json&#x27; \\   -d &#x27;{\&quot;content\&quot;: {\&quot;raw\&quot;: \&quot;Lorem ipsum.\&quot;}}&#x27; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostTest() {
        IssueComment body = null;
        String issueId = null;
        String workspace = null;
        String username = null;
        String repoSlug = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPost(body, issueId, workspace, username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the specified issue. This requires write access to the repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Issue response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdDelete(issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the specified issue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdGetTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Issue response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdGet(issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Modifies the issue.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repostories/evzijst/dogslow/issues/123 \\   -u evzijst -s -X PUT -H &#x27;Content-Type: application/json&#x27; \\   -d &#x27;{   \&quot;title\&quot;: \&quot;Updated title\&quot;,   \&quot;assignee\&quot;: {     \&quot;username\&quot;: \&quot;evzijst\&quot;   },   \&quot;priority\&quot;: \&quot;minor\&quot;,   \&quot;version\&quot;: {     \&quot;name\&quot;: \&quot;1.0\&quot;   },   \&quot;component\&quot;: null }&#x27; &#x60;&#x60;&#x60;  This example changes the &#x60;title&#x60;, &#x60;assignee&#x60;, &#x60;priority&#x60; and the &#x60;version&#x60;. It also removes the value of the &#x60;component&#x60; from the issue by setting the field to &#x60;null&#x60;. Any field not present keeps its existing value.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the &#x60;/issues/123/changes&#x60; endpoint. It also has a comment associated with the change.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdPutTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Issue response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdPut(issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retract your vote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDelete(issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Check whether the authenticated user has voted for this issue. A 204 status code indicates that the user has voted, while a 404 implies they haven&#x27;t.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGet(issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Vote for this issue.  To cast your vote, do an empty PUT. The 204 status code indicates that the operation was successful.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdVotePut(issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Stop watching this issue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDelete(issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Indicated whether or not the authenticated user is watching this issue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGet(issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Start watching this issue.  To start watching this issue, do an empty PUT. The 204 status code indicates that the operation was successful.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutTest() {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPut(issueId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new issue.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.  The authenticated user is used for the issue&#x27;s &#x60;reporter&#x60; field.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesPostTest() {
        Issue body = null;
        String repoSlug = null;
        String workspace = null;
        Issue response = api.repositoriesWorkspaceRepoSlugIssuesPost(body, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the milestones that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugMilestonesGetTest() {
        String repoSlug = null;
        String workspace = null;
        PaginatedMilestones response = api.repositoriesWorkspaceRepoSlugMilestonesGet(repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the specified issue tracker milestone object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetTest() {
        Integer milestoneId = null;
        String repoSlug = null;
        String workspace = null;
        Milestone response = api.repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGet(milestoneId, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the versions that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugVersionsGetTest() {
        String repoSlug = null;
        String workspace = null;
        PaginatedVersions response = api.repositoriesWorkspaceRepoSlugVersionsGet(repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the specified issue tracker version object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugVersionsVersionIdGetTest() {
        String repoSlug = null;
        Integer versionId = null;
        String workspace = null;
        Version response = api.repositoriesWorkspaceRepoSlugVersionsVersionIdGet(repoSlug, versionId, workspace);

        // TODO: test validations
    }
}
