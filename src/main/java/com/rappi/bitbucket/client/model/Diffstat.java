/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.CommitFile;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * A diffstat object that includes a summary of changes made to a file between two commits.
 */
@Schema(description = "A diffstat object that includes a summary of changes made to a file between two commits.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class Diffstat {
  @JsonProperty("type")
  private String type = null;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    ADDED("added"),
    REMOVED("removed"),
    MODIFIED("modified"),
    RENAMED("renamed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("lines_added")
  private Integer linesAdded = null;

  @JsonProperty("lines_removed")
  private Integer linesRemoved = null;

  @JsonProperty("old")
  private CommitFile old = null;

  @JsonProperty("new")
  private CommitFile _new = null;

  public Diffstat type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Diffstat status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Diffstat linesAdded(Integer linesAdded) {
    this.linesAdded = linesAdded;
    return this;
  }

   /**
   * Get linesAdded
   * @return linesAdded
  **/
  @Schema(description = "")
  public Integer getLinesAdded() {
    return linesAdded;
  }

  public void setLinesAdded(Integer linesAdded) {
    this.linesAdded = linesAdded;
  }

  public Diffstat linesRemoved(Integer linesRemoved) {
    this.linesRemoved = linesRemoved;
    return this;
  }

   /**
   * Get linesRemoved
   * @return linesRemoved
  **/
  @Schema(description = "")
  public Integer getLinesRemoved() {
    return linesRemoved;
  }

  public void setLinesRemoved(Integer linesRemoved) {
    this.linesRemoved = linesRemoved;
  }

  public Diffstat old(CommitFile old) {
    this.old = old;
    return this;
  }

   /**
   * Get old
   * @return old
  **/
  @Schema(description = "")
  public CommitFile getOld() {
    return old;
  }

  public void setOld(CommitFile old) {
    this.old = old;
  }

  public Diffstat _new(CommitFile _new) {
    this._new = _new;
    return this;
  }

   /**
   * Get _new
   * @return _new
  **/
  @Schema(description = "")
  public CommitFile getNew() {
    return _new;
  }

  public void setNew(CommitFile _new) {
    this._new = _new;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Diffstat diffstat = (Diffstat) o;
    return Objects.equals(this.type, diffstat.type) &&
        Objects.equals(this.status, diffstat.status) &&
        Objects.equals(this.linesAdded, diffstat.linesAdded) &&
        Objects.equals(this.linesRemoved, diffstat.linesRemoved) &&
        Objects.equals(this.old, diffstat.old) &&
        Objects.equals(this._new, diffstat._new);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, status, linesAdded, linesRemoved, old, _new);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Diffstat {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    linesAdded: ").append(toIndentedString(linesAdded)).append("\n");
    sb.append("    linesRemoved: ").append(toIndentedString(linesRemoved)).append("\n");
    sb.append("    old: ").append(toIndentedString(old)).append("\n");
    sb.append("    _new: ").append(toIndentedString(_new)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
