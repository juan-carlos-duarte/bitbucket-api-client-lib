/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.api;

import com.rappi.bitbucket.client.model.DeploymentVariable;
import com.rappi.bitbucket.client.model.Error;
import com.rappi.bitbucket.client.model.PaginatedDeploymentVariable;
import com.rappi.bitbucket.client.model.PaginatedPipelineCaches;
import com.rappi.bitbucket.client.model.PaginatedPipelineKnownHosts;
import com.rappi.bitbucket.client.model.PaginatedPipelineScheduleExecutions;
import com.rappi.bitbucket.client.model.PaginatedPipelineSchedules;
import com.rappi.bitbucket.client.model.PaginatedPipelineSteps;
import com.rappi.bitbucket.client.model.PaginatedPipelineVariables;
import com.rappi.bitbucket.client.model.PaginatedPipelines;
import com.rappi.bitbucket.client.model.Pipeline;
import com.rappi.bitbucket.client.model.PipelineBuildNumber;
import com.rappi.bitbucket.client.model.PipelineCacheContentUri;
import com.rappi.bitbucket.client.model.PipelineKnownHost;
import com.rappi.bitbucket.client.model.PipelineSchedule;
import com.rappi.bitbucket.client.model.PipelineSshKeyPair;
import com.rappi.bitbucket.client.model.PipelineStep;
import com.rappi.bitbucket.client.model.PipelineVariable;
import com.rappi.bitbucket.client.model.PipelinesConfig;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PipelinesApi
 */
@Ignore
public class PipelinesApiTest {

    private final PipelinesApi api = new PipelinesApi();

    /**
     * 
     *
     * Create a deployment environment level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeploymentVariableTest() {
        DeploymentVariable body = null;
        String username = null;
        String repoSlug = null;
        String environmentUuid = null;
        String variableUuid = null;
        DeploymentVariable response = api.createDeploymentVariable(body, username, repoSlug, environmentUuid, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Endpoint to create and initiate a pipeline. There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. The specified branch will be used to determine which pipeline definition from the &#x60;bitbucket-pipelines.yml&#x60; file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#x27;Content-Type: application/json&#x27; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#x27;   {     \&quot;target\&quot;: {       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#x27; &#x60;&#x60;&#x60; # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.  The following reference types are supported:  * &#x60;branch&#x60; * &#x60;named_branch&#x60; * &#x60;bookmark&#x60;  * &#x60;tag&#x60;  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#x27;Content-Type: application/json&#x27; \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#x27;   {     \&quot;target\&quot;: {       \&quot;commit\&quot;: {         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;hash\&quot;: \&quot;ce5b7431602f7cbba007062eeb55225c6e18e956\&quot;       },       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#x27; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#x27;Content-Type: application/json&#x27; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#x27;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },         \&quot;selector\&quot;: {            \&quot;type\&quot;:\&quot;custom\&quot;,               \&quot;pattern\&quot;:\&quot;Deploy to production\&quot;           },         \&quot;type\&quot;:\&quot;pipeline_commit_target\&quot;    }   }&#x27; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit in the context of a specified reference. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#x27;Content-Type: application/json&#x27; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#x27;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },        \&quot;selector\&quot;: {           \&quot;type\&quot;: \&quot;custom\&quot;,           \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;        },        \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,        \&quot;ref_name\&quot;: \&quot;master\&quot;,        \&quot;ref_type\&quot;: \&quot;branch\&quot;      }   }&#x27; &#x60;&#x60;&#x60;   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#x27;Content-Type: application/json&#x27; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#x27;   {     \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;,       \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;custom\&quot;,         \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;       }     },     \&quot;variables\&quot;: [       {         \&quot;key\&quot;: \&quot;var1key\&quot;,         \&quot;value\&quot;: \&quot;var1value\&quot;,         \&quot;secured\&quot;: true       },       {         \&quot;key\&quot;: \&quot;var2key\&quot;,         \&quot;value\&quot;: \&quot;var2value\&quot;       }     ]   }&#x27; &#x60;&#x60;&#x60;  # Trigger a pull request pipeline  You can also initiate a pipeline for a specific pull request.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#x27;Content-Type: application/json&#x27; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#x27;   {  \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_pullrequest_target\&quot;,    \&quot;source\&quot;: \&quot;pull-request-branch\&quot;,       \&quot;destination\&quot;: \&quot;master\&quot;,       \&quot;destination_commit\&quot;: {         \&quot;hash\&quot; : \&quot;9f848b7\&quot;       },       \&quot;commit\&quot;: {        \&quot;hash\&quot; : \&quot;1a372fc\&quot;       },       \&quot;pullrequest\&quot; : {        \&quot;id\&quot; : \&quot;3\&quot;       },    \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;pull-requests\&quot;,         \&quot;pattern\&quot;: \&quot;**\&quot;       }     }   }&#x27; &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPipelineForRepositoryTest() {
        Pipeline body = null;
        String username = null;
        String repoSlug = null;
        Pipeline response = api.createPipelineForRepository(body, username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPipelineVariableForTeamTest() {
        String username = null;
        PipelineVariable body = null;
        PipelineVariable response = api.createPipelineVariableForTeam(username, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPipelineVariableForUserTest() {
        String selectedUser = null;
        PipelineVariable body = null;
        PipelineVariable response = api.createPipelineVariableForUser(selectedUser, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a workspace level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPipelineVariableForWorkspaceTest() {
        String workspace = null;
        PipelineVariable body = null;
        PipelineVariable response = api.createPipelineVariableForWorkspace(workspace, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a repository level known host.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepositoryPipelineKnownHostTest() {
        PipelineKnownHost body = null;
        String username = null;
        String repoSlug = null;
        PipelineKnownHost response = api.createRepositoryPipelineKnownHost(body, username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a schedule for the given repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepositoryPipelineScheduleTest() {
        PipelineSchedule body = null;
        String username = null;
        String repoSlug = null;
        PipelineSchedule response = api.createRepositoryPipelineSchedule(body, username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a repository level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepositoryPipelineVariableTest() {
        PipelineVariable body = null;
        String username = null;
        String repoSlug = null;
        PipelineVariable response = api.createRepositoryPipelineVariable(body, username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a deployment environment level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeploymentVariableTest() {
        String username = null;
        String repoSlug = null;
        String environmentUuid = null;
        String variableUuid = null;
        api.deleteDeploymentVariable(username, repoSlug, environmentUuid, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePipelineVariableForTeamTest() {
        String username = null;
        String variableUuid = null;
        api.deletePipelineVariableForTeam(username, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePipelineVariableForUserTest() {
        String selectedUser = null;
        String variableUuid = null;
        api.deletePipelineVariableForUser(selectedUser, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a workspace level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePipelineVariableForWorkspaceTest() {
        String workspace = null;
        String variableUuid = null;
        api.deletePipelineVariableForWorkspace(workspace, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a repository cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineCacheTest() {
        String workspace = null;
        String repoSlug = null;
        String cacheUuid = null;
        api.deleteRepositoryPipelineCache(workspace, repoSlug, cacheUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete the repository SSH key pair.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineKeyPairTest() {
        String username = null;
        String repoSlug = null;
        api.deleteRepositoryPipelineKeyPair(username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a repository level known host.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineKnownHostTest() {
        String username = null;
        String repoSlug = null;
        String knownHostUuid = null;
        api.deleteRepositoryPipelineKnownHost(username, repoSlug, knownHostUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a schedule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineScheduleTest() {
        String username = null;
        String repoSlug = null;
        String scheduleUuid = null;
        api.deleteRepositoryPipelineSchedule(username, repoSlug, scheduleUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Delete a repository level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineVariableTest() {
        String username = null;
        String repoSlug = null;
        String variableUuid = null;
        api.deleteRepositoryPipelineVariable(username, repoSlug, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Find deployment environment level variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeploymentVariablesTest() {
        String username = null;
        String repoSlug = null;
        String environmentUuid = null;
        PaginatedDeploymentVariable response = api.getDeploymentVariables(username, repoSlug, environmentUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a specified pipeline
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineForRepositoryTest() {
        String username = null;
        String repoSlug = null;
        String pipelineUuid = null;
        Pipeline response = api.getPipelineForRepository(username, repoSlug, pipelineUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a given step of a pipeline.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineStepForRepositoryTest() {
        String username = null;
        String repoSlug = null;
        String pipelineUuid = null;
        String stepUuid = null;
        PipelineStep response = api.getPipelineStepForRepository(username, repoSlug, pipelineUuid, stepUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineStepLogForRepositoryTest() {
        String username = null;
        String repoSlug = null;
        String pipelineUuid = null;
        String stepUuid = null;
        api.getPipelineStepLogForRepository(username, repoSlug, pipelineUuid, stepUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Find steps for the given pipeline.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineStepsForRepositoryTest() {
        String username = null;
        String repoSlug = null;
        String pipelineUuid = null;
        PaginatedPipelineSteps response = api.getPipelineStepsForRepository(username, repoSlug, pipelineUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineVariableForTeamTest() {
        String username = null;
        String variableUuid = null;
        PipelineVariable response = api.getPipelineVariableForTeam(username, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineVariableForUserTest() {
        String selectedUser = null;
        String variableUuid = null;
        PipelineVariable response = api.getPipelineVariableForUser(selectedUser, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a workspace level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineVariableForWorkspaceTest() {
        String workspace = null;
        String variableUuid = null;
        PipelineVariable response = api.getPipelineVariableForWorkspace(workspace, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Find account level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineVariablesForTeamTest() {
        String username = null;
        PaginatedPipelineVariables response = api.getPipelineVariablesForTeam(username);

        // TODO: test validations
    }
    /**
     * 
     *
     * Find user level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineVariablesForUserTest() {
        String selectedUser = null;
        PaginatedPipelineVariables response = api.getPipelineVariablesForUser(selectedUser);

        // TODO: test validations
    }
    /**
     * 
     *
     * Find workspace level variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineVariablesForWorkspaceTest() {
        String workspace = null;
        PaginatedPipelineVariables response = api.getPipelineVariablesForWorkspace(workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Find pipelines
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelinesForRepositoryTest() {
        String username = null;
        String repoSlug = null;
        PaginatedPipelines response = api.getPipelinesForRepository(username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve the URI of the content of the specified cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineCacheContentURITest() {
        String workspace = null;
        String repoSlug = null;
        String cacheUuid = null;
        PipelineCacheContentUri response = api.getRepositoryPipelineCacheContentURI(workspace, repoSlug, cacheUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve the repository pipelines caches.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineCachesTest() {
        String workspace = null;
        String repoSlug = null;
        PaginatedPipelineCaches response = api.getRepositoryPipelineCaches(workspace, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve the repository pipelines configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineConfigTest() {
        String workspace = null;
        String repoSlug = null;
        PipelinesConfig response = api.getRepositoryPipelineConfig(workspace, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a repository level known host.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineKnownHostTest() {
        String username = null;
        String repoSlug = null;
        String knownHostUuid = null;
        PipelineKnownHost response = api.getRepositoryPipelineKnownHost(username, repoSlug, knownHostUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Find repository level known hosts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineKnownHostsTest() {
        String username = null;
        String repoSlug = null;
        PaginatedPipelineKnownHosts response = api.getRepositoryPipelineKnownHosts(username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a schedule by its UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineScheduleTest() {
        String username = null;
        String repoSlug = null;
        String scheduleUuid = null;
        PipelineSchedule response = api.getRepositoryPipelineSchedule(username, repoSlug, scheduleUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve the executions of a given schedule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineScheduleExecutionsTest() {
        String username = null;
        String repoSlug = null;
        PaginatedPipelineScheduleExecutions response = api.getRepositoryPipelineScheduleExecutions(username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve the configured schedules for the given repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineSchedulesTest() {
        String username = null;
        String repoSlug = null;
        PaginatedPipelineSchedules response = api.getRepositoryPipelineSchedules(username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineSshKeyPairTest() {
        String username = null;
        String repoSlug = null;
        PipelineSshKeyPair response = api.getRepositoryPipelineSshKeyPair(username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a repository level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineVariableTest() {
        String username = null;
        String repoSlug = null;
        String variableUuid = null;
        PipelineVariable response = api.getRepositoryPipelineVariable(username, repoSlug, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Find repository level variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoryPipelineVariablesTest() {
        String username = null;
        String repoSlug = null;
        PaginatedPipelineVariables response = api.getRepositoryPipelineVariables(username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Signal the stop of a pipeline and all of its steps that not have completed yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPipelineTest() {
        String username = null;
        String repoSlug = null;
        String pipelineUuid = null;
        api.stopPipeline(username, repoSlug, pipelineUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update a deployment environment level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeploymentVariableTest() {
        DeploymentVariable body = null;
        String username = null;
        String repoSlug = null;
        String environmentUuid = null;
        String variableUuid = null;
        DeploymentVariable response = api.updateDeploymentVariable(body, username, repoSlug, environmentUuid, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePipelineVariableForTeamTest() {
        PipelineVariable body = null;
        String username = null;
        String variableUuid = null;
        PipelineVariable response = api.updatePipelineVariableForTeam(body, username, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePipelineVariableForUserTest() {
        PipelineVariable body = null;
        String selectedUser = null;
        String variableUuid = null;
        PipelineVariable response = api.updatePipelineVariableForUser(body, selectedUser, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update a workspace level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePipelineVariableForWorkspaceTest() {
        PipelineVariable body = null;
        String workspace = null;
        String variableUuid = null;
        PipelineVariable response = api.updatePipelineVariableForWorkspace(body, workspace, variableUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepositoryBuildNumberTest() {
        PipelineBuildNumber body = null;
        String username = null;
        String repoSlug = null;
        PipelineBuildNumber response = api.updateRepositoryBuildNumber(body, username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update the pipelines configuration for a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineConfigTest() {
        PipelinesConfig body = null;
        String username = null;
        String repoSlug = null;
        PipelinesConfig response = api.updateRepositoryPipelineConfig(body, username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineKeyPairTest() {
        PipelineSshKeyPair body = null;
        String username = null;
        String repoSlug = null;
        PipelineSshKeyPair response = api.updateRepositoryPipelineKeyPair(body, username, repoSlug);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update a repository level known host.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineKnownHostTest() {
        PipelineKnownHost body = null;
        String username = null;
        String repoSlug = null;
        String knownHostUuid = null;
        PipelineKnownHost response = api.updateRepositoryPipelineKnownHost(body, username, repoSlug, knownHostUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update a schedule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineScheduleTest() {
        PipelineSchedule body = null;
        String username = null;
        String repoSlug = null;
        String scheduleUuid = null;
        PipelineSchedule response = api.updateRepositoryPipelineSchedule(body, username, repoSlug, scheduleUuid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update a repository level variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineVariableTest() {
        PipelineVariable body = null;
        String username = null;
        String repoSlug = null;
        String variableUuid = null;
        PipelineVariable response = api.updateRepositoryPipelineVariable(body, username, repoSlug, variableUuid);

        // TODO: test validations
    }
}
