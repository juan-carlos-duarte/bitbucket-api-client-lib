/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.api;

import com.rappi.bitbucket.client.model.Error;
import com.rappi.bitbucket.client.model.PaginatedProjects;
import com.rappi.bitbucket.client.model.PaginatedWebhookSubscriptions;
import com.rappi.bitbucket.client.model.PaginatedWorkspaceMemberships;
import com.rappi.bitbucket.client.model.PaginatedWorkspaces;
import com.rappi.bitbucket.client.model.Project;
import com.rappi.bitbucket.client.model.WebhookSubscription;
import com.rappi.bitbucket.client.model.Workspace;
import com.rappi.bitbucket.client.model.WorkspaceMembership;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkspacesApi
 */
@Ignore
public class WorkspacesApiTest {

    private final WorkspacesApi api = new WorkspacesApi();

    /**
     * 
     *
     * Returns an object for each workspace the caller is a member of, and their effective role - the highest level of privilege the caller has. If a user is a member of multiple groups with distinct roles, only the highest level is returned.  Permissions can be:  * &#x60;owner&#x60; * &#x60;collaborator&#x60; * &#x60;member&#x60;  Example:  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/user/permissions/workspaces  {   \&quot;pagelen\&quot;: 10,   \&quot;page\&quot;: 1,   \&quot;size\&quot;: 1,   \&quot;values\&quot;: [     {       \&quot;type\&quot;: \&quot;workspace_membership\&quot;,       \&quot;permission\&quot;: \&quot;owner\&quot;,       \&quot;last_accessed\&quot;: \&quot;2019-03-07T12:35:02.900024+00:00\&quot;,       \&quot;added_on\&quot;: \&quot;2018-10-11T17:42:02.961424+00:00\&quot;,       \&quot;user\&quot;: {         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;uuid\&quot;: \&quot;{470c176d-3574-44ea-bb41-89e8638bcca4}\&quot;,         \&quot;nickname\&quot;: \&quot;evzijst\&quot;,         \&quot;display_name\&quot;: \&quot;Erik van Zijst\&quot;,       },       \&quot;workspace\&quot;: {         \&quot;type\&quot;: \&quot;workspace\&quot;,         \&quot;uuid\&quot;: \&quot;{a15fb181-db1f-48f7-b41f-e1eff06929d6}\&quot;,         \&quot;slug\&quot;: \&quot;bbworkspace1\&quot;,         \&quot;name\&quot;: \&quot;Atlassian Bitbucket\&quot;,       }     }   ] } &#x60;&#x60;&#x60;  Results may be further [filtered or sorted](../../../meta/filtering) by workspace or permission by adding the following query string parameters:  * &#x60;q&#x3D;workspace.slug&#x3D;\&quot;bbworkspace1\&quot;&#x60; or &#x60;q&#x3D;permission&#x3D;\&quot;owner\&quot;&#x60; * &#x60;sort&#x3D;workspace.slug&#x60;  Note that the query parameter values need to be URL escaped so that &#x60;&#x3D;&#x60; would become &#x60;%3D&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userPermissionsWorkspacesGetTest() {
        String q = null;
        String sort = null;
        PaginatedWorkspaceMemberships response = api.userPermissionsWorkspacesGet(q, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a list of workspaces accessible by the authenticated user.  Example:  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/workspaces  {   \&quot;pagelen\&quot;: 10,   \&quot;page\&quot;: 1,   \&quot;size\&quot;: 1,   \&quot;values\&quot;: [     {         \&quot;uuid\&quot;: \&quot;{a15fb181-db1f-48f7-b41f-e1eff06929d6}\&quot;,         \&quot;links\&quot;: {             \&quot;owners\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/workspaces/bbworkspace1/members?q&#x3D;permission%3D%22owner%22\&quot;             },             \&quot;self\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/workspaces/bbworkspace1\&quot;             },             \&quot;repositories\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/bbworkspace1\&quot;             },             \&quot;snippets\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/snippets/bbworkspace1\&quot;             },             \&quot;html\&quot;: {                 \&quot;href\&quot;: \&quot;https://bitbucket.org/bbworkspace1/\&quot;             },             \&quot;avatar\&quot;: {                 \&quot;href\&quot;: \&quot;https://bitbucket.org/workspaces/bbworkspace1/avatar/?ts&#x3D;1543465801\&quot;             },             \&quot;members\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/workspaces/bbworkspace1/members\&quot;             },             \&quot;projects\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/workspaces/bbworkspace1/projects\&quot;             }         },         \&quot;created_on\&quot;: \&quot;2018-11-14T19:15:05.058566+00:00\&quot;,         \&quot;type\&quot;: \&quot;workspace\&quot;,         \&quot;slug\&quot;: \&quot;bbworkspace1\&quot;,         \&quot;is_private\&quot;: true,         \&quot;name\&quot;: \&quot;Atlassian Bitbucket\&quot;     }   ] } &#x60;&#x60;&#x60;  Results may be further [filtered or sorted](../meta/filtering) by workspace or permission by adding the following query string parameters:  * &#x60;q&#x3D;slug&#x3D;\&quot;bbworkspace1\&quot;&#x60; or &#x60;q&#x3D;is_private&#x3D;true&#x60; * &#x60;sort&#x3D;created_on&#x60;  Note that the query parameter values need to be URL escaped so that &#x60;&#x3D;&#x60; would become &#x60;%3D&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesGetTest() {
        String role = null;
        String q = null;
        String sort = null;
        PaginatedWorkspaces response = api.workspacesGet(role, q, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the requested workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceGetTest() {
        String workspace = null;
        Workspace response = api.workspacesWorkspaceGet(workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a paginated list of webhooks installed on this workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksGetTest() {
        String workspace = null;
        PaginatedWebhookSubscriptions response = api.workspacesWorkspaceHooksGet(workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new webhook on the specified workspace.  Workspace webhooks are fired for events from all repositories contained by that workspace.  Note that only owners can install webhooks on workspaces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksPostTest() {
        String workspace = null;
        WebhookSubscription response = api.workspacesWorkspaceHooksPost(workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the specified webhook subscription from the given workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksUidDeleteTest() {
        String workspace = null;
        String uid = null;
        api.workspacesWorkspaceHooksUidDelete(workspace, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the webhook with the specified id installed on the given workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksUidGetTest() {
        String workspace = null;
        String uid = null;
        WebhookSubscription response = api.workspacesWorkspaceHooksUidGet(workspace, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksUidPutTest() {
        String workspace = null;
        String uid = null;
        WebhookSubscription response = api.workspacesWorkspaceHooksUidPut(workspace, uid);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns all members of the requested workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceMembersGetTest() {
        String workspace = null;
        PaginatedWorkspaceMemberships response = api.workspacesWorkspaceMembersGet(workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the workspace membership, which includes a &#x60;User&#x60; object for the member and a &#x60;Workspace&#x60; object for the requested workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceMembersMemberGetTest() {
        String member = null;
        String workspace = null;
        WorkspaceMembership response = api.workspacesWorkspaceMembersMemberGet(member, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the list of members in a workspace and their permission levels. Permission can be: * &#x60;owner&#x60; * &#x60;collaborator&#x60; * &#x60;member&#x60;  Example:  &#x60;&#x60;&#x60; $ curl -X https://api.bitbucket.org/2.0/workspaces/bbworkspace1/permissions  {     \&quot;pagelen\&quot;: 10,     \&quot;values\&quot;: [         {             \&quot;permission\&quot;: \&quot;owner\&quot;,             \&quot;type\&quot;: \&quot;workspace_membership\&quot;,             \&quot;user\&quot;: {                 \&quot;type\&quot;: \&quot;user\&quot;,                 \&quot;uuid\&quot;: \&quot;{470c176d-3574-44ea-bb41-89e8638bcca4}\&quot;,                 \&quot;display_name\&quot;: \&quot;Erik van Zijst\&quot;,             },             \&quot;workspace\&quot;: {                 \&quot;type\&quot;: \&quot;workspace\&quot;,                 \&quot;uuid\&quot;: \&quot;{a15fb181-db1f-48f7-b41f-e1eff06929d6}\&quot;,                 \&quot;slug\&quot;: \&quot;bbworkspace1\&quot;,                 \&quot;name\&quot;: \&quot;Atlassian Bitbucket\&quot;,             }         },         {             \&quot;permission\&quot;: \&quot;member\&quot;,             \&quot;type\&quot;: \&quot;workspace_membership\&quot;,             \&quot;user\&quot;: {                 \&quot;type\&quot;: \&quot;user\&quot;,                 \&quot;nickname\&quot;: \&quot;seanaty\&quot;,                 \&quot;display_name\&quot;: \&quot;Sean Conaty\&quot;,                 \&quot;uuid\&quot;: \&quot;{504c3b62-8120-4f0c-a7bc-87800b9d6f70}\&quot;             },             \&quot;workspace\&quot;: {                 \&quot;type\&quot;: \&quot;workspace\&quot;,                 \&quot;uuid\&quot;: \&quot;{a15fb181-db1f-48f7-b41f-e1eff06929d6}\&quot;,                 \&quot;slug\&quot;: \&quot;bbworkspace1\&quot;,                 \&quot;name\&quot;: \&quot;Atlassian Bitbucket\&quot;,             }         }     ],     \&quot;page\&quot;: 1,     \&quot;size\&quot;: 2 } &#x60;&#x60;&#x60;  Results may be further [filtered](../../../meta/filtering) by permission by adding the following query string parameters:  * &#x60;q&#x3D;permission&#x3D;\&quot;owner\&quot;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspacePermissionsGetTest() {
        String workspace = null;
        String q = null;
        PaginatedWorkspaceMemberships response = api.workspacesWorkspacePermissionsGet(workspace, q);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the list of projects in this workspace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceProjectsGetTest() {
        String workspace = null;
        PaginatedProjects response = api.workspacesWorkspaceProjectsGet(workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns the requested project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workspacesWorkspaceProjectsProjectKeyGetTest() {
        String projectKey = null;
        String workspace = null;
        Project response = api.workspacesWorkspaceProjectsProjectKeyGet(projectKey, workspace);

        // TODO: test validations
    }
}
