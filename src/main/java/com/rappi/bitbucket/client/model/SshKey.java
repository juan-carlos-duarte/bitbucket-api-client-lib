/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.BranchingModelSettingsLinks;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;
/**
 * SshKey
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class SshKey extends Object {
  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("key")
  private String key = null;

  @JsonProperty("comment")
  private String comment = null;

  @JsonProperty("label")
  private String label = null;

  @JsonProperty("created_on")
  private OffsetDateTime createdOn = null;

  @JsonProperty("last_used")
  private OffsetDateTime lastUsed = null;

  @JsonProperty("links")
  private BranchingModelSettingsLinks links = null;

  public SshKey uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The SSH key&#x27;s immutable ID.
   * @return uuid
  **/
  @Schema(description = "The SSH key's immutable ID.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public SshKey key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The SSH public key value in OpenSSH format.
   * @return key
  **/
  @Schema(description = "The SSH public key value in OpenSSH format.")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public SshKey comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * The comment parsed from the SSH key (if present)
   * @return comment
  **/
  @Schema(description = "The comment parsed from the SSH key (if present)")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public SshKey label(String label) {
    this.label = label;
    return this;
  }

   /**
   * The user-defined label for the SSH key
   * @return label
  **/
  @Schema(description = "The user-defined label for the SSH key")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public SshKey createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

   /**
   * Get createdOn
   * @return createdOn
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }

  public SshKey lastUsed(OffsetDateTime lastUsed) {
    this.lastUsed = lastUsed;
    return this;
  }

   /**
   * Get lastUsed
   * @return lastUsed
  **/
  @Schema(description = "")
  public OffsetDateTime getLastUsed() {
    return lastUsed;
  }

  public void setLastUsed(OffsetDateTime lastUsed) {
    this.lastUsed = lastUsed;
  }

  public SshKey links(BranchingModelSettingsLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @Schema(description = "")
  public BranchingModelSettingsLinks getLinks() {
    return links;
  }

  public void setLinks(BranchingModelSettingsLinks links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SshKey sshKey = (SshKey) o;
    return Objects.equals(this.uuid, sshKey.uuid) &&
        Objects.equals(this.key, sshKey.key) &&
        Objects.equals(this.comment, sshKey.comment) &&
        Objects.equals(this.label, sshKey.label) &&
        Objects.equals(this.createdOn, sshKey.createdOn) &&
        Objects.equals(this.lastUsed, sshKey.lastUsed) &&
        Objects.equals(this.links, sshKey.links) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, key, comment, label, createdOn, lastUsed, links, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SshKey {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    lastUsed: ").append(toIndentedString(lastUsed)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
