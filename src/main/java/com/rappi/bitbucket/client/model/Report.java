/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.ReportData;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Report
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class Report extends Object {
  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("details")
  private String details = null;

  @JsonProperty("external_id")
  private String externalId = null;

  @JsonProperty("reporter")
  private String reporter = null;

  @JsonProperty("link")
  private String link = null;

  @JsonProperty("remote_link_enabled")
  private Boolean remoteLinkEnabled = null;

  @JsonProperty("logo_url")
  private String logoUrl = null;

  /**
   * The type of the report.
   */
  public enum ReportTypeEnum {
    SECURITY("SECURITY"),
    COVERAGE("COVERAGE"),
    TEST("TEST"),
    BUG("BUG");

    private String value;

    ReportTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ReportTypeEnum fromValue(String text) {
      for (ReportTypeEnum b : ReportTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("report_type")
  private ReportTypeEnum reportType = null;

  /**
   * The state of the report. May be set to PENDING and later updated.
   */
  public enum ResultEnum {
    PASSED("PASSED"),
    FAILED("FAILED"),
    PENDING("PENDING");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ResultEnum fromValue(String text) {
      for (ResultEnum b : ResultEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("result")
  private ResultEnum result = null;

  @JsonProperty("data")
  private List<ReportData> data = null;

  @JsonProperty("created_on")
  private OffsetDateTime createdOn = null;

  @JsonProperty("updated_on")
  private OffsetDateTime updatedOn = null;

  public Report uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The UUID that can be used to identify the report.
   * @return uuid
  **/
  @Schema(description = "The UUID that can be used to identify the report.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public Report title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The title of the report.
   * @return title
  **/
  @Schema(description = "The title of the report.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Report details(String details) {
    this.details = details;
    return this;
  }

   /**
   * A string to describe the purpose of the report.
   * @return details
  **/
  @Schema(description = "A string to describe the purpose of the report.")
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }

  public Report externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * ID of the report provided by the report creator. It can be used to identify the report as an alternative to it&#x27;s generated uuid. It is not used by Bitbucket, but only by the report creator for updating or deleting this specific report. Needs to be unique.
   * @return externalId
  **/
  @Schema(description = "ID of the report provided by the report creator. It can be used to identify the report as an alternative to it's generated uuid. It is not used by Bitbucket, but only by the report creator for updating or deleting this specific report. Needs to be unique.")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public Report reporter(String reporter) {
    this.reporter = reporter;
    return this;
  }

   /**
   * A string to describe the tool or company who created the report.
   * @return reporter
  **/
  @Schema(description = "A string to describe the tool or company who created the report.")
  public String getReporter() {
    return reporter;
  }

  public void setReporter(String reporter) {
    this.reporter = reporter;
  }

  public Report link(String link) {
    this.link = link;
    return this;
  }

   /**
   * A URL linking to the results of the report in an external tool.
   * @return link
  **/
  @Schema(description = "A URL linking to the results of the report in an external tool.")
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public Report remoteLinkEnabled(Boolean remoteLinkEnabled) {
    this.remoteLinkEnabled = remoteLinkEnabled;
    return this;
  }

   /**
   * If enabled, a remote link is created in Jira for the issue associated with the commit the report belongs to.
   * @return remoteLinkEnabled
  **/
  @Schema(description = "If enabled, a remote link is created in Jira for the issue associated with the commit the report belongs to.")
  public Boolean isRemoteLinkEnabled() {
    return remoteLinkEnabled;
  }

  public void setRemoteLinkEnabled(Boolean remoteLinkEnabled) {
    this.remoteLinkEnabled = remoteLinkEnabled;
  }

  public Report logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * A URL to the report logo. If none is provided, the default insights logo will be used.
   * @return logoUrl
  **/
  @Schema(description = "A URL to the report logo. If none is provided, the default insights logo will be used.")
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public Report reportType(ReportTypeEnum reportType) {
    this.reportType = reportType;
    return this;
  }

   /**
   * The type of the report.
   * @return reportType
  **/
  @Schema(description = "The type of the report.")
  public ReportTypeEnum getReportType() {
    return reportType;
  }

  public void setReportType(ReportTypeEnum reportType) {
    this.reportType = reportType;
  }

  public Report result(ResultEnum result) {
    this.result = result;
    return this;
  }

   /**
   * The state of the report. May be set to PENDING and later updated.
   * @return result
  **/
  @Schema(description = "The state of the report. May be set to PENDING and later updated.")
  public ResultEnum getResult() {
    return result;
  }

  public void setResult(ResultEnum result) {
    this.result = result;
  }

  public Report data(List<ReportData> data) {
    this.data = data;
    return this;
  }

  public Report addDataItem(ReportData dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<ReportData>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * An array of data fields to display information on the report. Maximum 10.
   * @return data
  **/
  @Schema(description = "An array of data fields to display information on the report. Maximum 10.")
  public List<ReportData> getData() {
    return data;
  }

  public void setData(List<ReportData> data) {
    this.data = data;
  }

  public Report createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

   /**
   * The timestamp when the report was created.
   * @return createdOn
  **/
  @Schema(description = "The timestamp when the report was created.")
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }

  public Report updatedOn(OffsetDateTime updatedOn) {
    this.updatedOn = updatedOn;
    return this;
  }

   /**
   * The timestamp when the report was updated.
   * @return updatedOn
  **/
  @Schema(description = "The timestamp when the report was updated.")
  public OffsetDateTime getUpdatedOn() {
    return updatedOn;
  }

  public void setUpdatedOn(OffsetDateTime updatedOn) {
    this.updatedOn = updatedOn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Report report = (Report) o;
    return Objects.equals(this.uuid, report.uuid) &&
        Objects.equals(this.title, report.title) &&
        Objects.equals(this.details, report.details) &&
        Objects.equals(this.externalId, report.externalId) &&
        Objects.equals(this.reporter, report.reporter) &&
        Objects.equals(this.link, report.link) &&
        Objects.equals(this.remoteLinkEnabled, report.remoteLinkEnabled) &&
        Objects.equals(this.logoUrl, report.logoUrl) &&
        Objects.equals(this.reportType, report.reportType) &&
        Objects.equals(this.result, report.result) &&
        Objects.equals(this.data, report.data) &&
        Objects.equals(this.createdOn, report.createdOn) &&
        Objects.equals(this.updatedOn, report.updatedOn) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, title, details, externalId, reporter, link, remoteLinkEnabled, logoUrl, reportType, result, data, createdOn, updatedOn, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Report {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    reporter: ").append(toIndentedString(reporter)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    remoteLinkEnabled: ").append(toIndentedString(remoteLinkEnabled)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    updatedOn: ").append(toIndentedString(updatedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
