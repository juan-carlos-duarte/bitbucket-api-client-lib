/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.api;

import com.rappi.bitbucket.client.model.Branchrestriction;
import com.rappi.bitbucket.client.model.Error;
import com.rappi.bitbucket.client.model.PaginatedBranchrestrictions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BranchrestrictionsApi
 */
@Ignore
public class BranchrestrictionsApiTest {

    private final BranchrestrictionsApi api = new BranchrestrictionsApi();

    /**
     * 
     *
     * Returns a paginated list of all branch restrictions on the repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugBranchRestrictionsGetTest() {
        String repoSlug = null;
        String workspace = null;
        String kind = null;
        String pattern = null;
        PaginatedBranchrestrictions response = api.repositoriesWorkspaceRepoSlugBranchRestrictionsGet(repoSlug, workspace, kind, pattern);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes an existing branch restriction rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteTest() {
        String id = null;
        String repoSlug = null;
        String workspace = null;
        api.repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete(id, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a specific branch restriction rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetTest() {
        String id = null;
        String repoSlug = null;
        String workspace = null;
        Branchrestriction response = api.repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet(id, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates an existing branch restriction rule.  Fields not present in the request body are ignored.  See [&#x60;POST&#x60;](../branch-restrictions#post) for details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutTest() {
        Branchrestriction body = null;
        String id = null;
        String repoSlug = null;
        String workspace = null;
        Branchrestriction response = api.repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut(body, id, repoSlug, workspace);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new branch restriction rule for a repository.  &#x60;kind&#x60; describes what will be restricted. Allowed values include: &#x60;push&#x60;, &#x60;force&#x60;, &#x60;delete&#x60; and &#x60;restrict_merges&#x60;.  Different kinds of branch restrictions have different requirements:  * &#x60;push&#x60; and &#x60;restrict_merges&#x60; require &#x60;users&#x60; and &#x60;groups&#x60; to be   specified. Empty lists are allowed, in which case permission is   denied for everybody. * &#x60;force&#x60; can not be specified in a Mercurial repository.  The restriction applies to all branches that match. There are two ways to match a branch. It is configured in &#x60;branch_match_kind&#x60;:  1. &#x60;glob&#x60;: Matches a branch against the &#x60;pattern&#x60;. A &#x60;&#x27;*&#x27;&#x60; in    &#x60;pattern&#x60; will expand to match zero or more characters, and every    other character matches itself. For example, &#x60;&#x27;foo*&#x27;&#x60; will match    &#x60;&#x27;foo&#x27;&#x60; and &#x60;&#x27;foobar&#x27;&#x60;, but not &#x60;&#x27;barfoo&#x27;&#x60;. &#x60;&#x27;*&#x27;&#x60; will match all    branches. 2. &#x60;branching_model&#x60;: Matches a branch against the repository&#x27;s    branching model. The &#x60;branch_type&#x60; controls the type of branch    to match. Allowed values include: &#x60;production&#x60;, &#x60;development&#x60;,    &#x60;bugfix&#x60;, &#x60;release&#x60;, &#x60;feature&#x60; and &#x60;hotfix&#x60;.  The combination of &#x60;kind&#x60; and match must be unique. This means that two &#x60;glob&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;pattern&#x60;. Additionally, two &#x60;branching_model&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;branch_type&#x60;.  &#x60;users&#x60; and &#x60;groups&#x60; are lists of users and groups that are except from the restriction. They can only be configured in &#x60;push&#x60; and &#x60;restrict_merges&#x60; restrictions. The &#x60;push&#x60; restriction stops a user pushing to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. The &#x60;restrict_merges&#x60; stops a user merging pull requests to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. Adding new users or groups to an existing restriction should be done via &#x60;PUT&#x60;.  Note that branch restrictions with overlapping matchers is allowed, but the resulting behavior may be surprising.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugBranchRestrictionsPostTest() {
        Branchrestriction body = null;
        String repoSlug = null;
        String workspace = null;
        Branchrestriction response = api.repositoriesWorkspaceRepoSlugBranchRestrictionsPost(body, repoSlug, workspace);

        // TODO: test validations
    }
}
