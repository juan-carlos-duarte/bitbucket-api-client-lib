/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.PipelineCommand;
import com.rappi.bitbucket.client.model.PipelineImage;
import com.rappi.bitbucket.client.model.PipelineStepState;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * PipelineStep
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class PipelineStep extends Object {
  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("started_on")
  private OffsetDateTime startedOn = null;

  @JsonProperty("completed_on")
  private OffsetDateTime completedOn = null;

  @JsonProperty("state")
  private PipelineStepState state = null;

  @JsonProperty("image")
  private PipelineImage image = null;

  @JsonProperty("setup_commands")
  private List<PipelineCommand> setupCommands = null;

  @JsonProperty("script_commands")
  private List<PipelineCommand> scriptCommands = null;

  public PipelineStep uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The UUID identifying the step.
   * @return uuid
  **/
  @Schema(description = "The UUID identifying the step.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public PipelineStep startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

   /**
   * The timestamp when the step execution was started. This is not set when the step hasn&#x27;t executed yet.
   * @return startedOn
  **/
  @Schema(description = "The timestamp when the step execution was started. This is not set when the step hasn't executed yet.")
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }

  public PipelineStep completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

   /**
   * The timestamp when the step execution was completed. This is not set if the step is still in progress.
   * @return completedOn
  **/
  @Schema(description = "The timestamp when the step execution was completed. This is not set if the step is still in progress.")
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }

  public PipelineStep state(PipelineStepState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public PipelineStepState getState() {
    return state;
  }

  public void setState(PipelineStepState state) {
    this.state = state;
  }

  public PipelineStep image(PipelineImage image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public PipelineImage getImage() {
    return image;
  }

  public void setImage(PipelineImage image) {
    this.image = image;
  }

  public PipelineStep setupCommands(List<PipelineCommand> setupCommands) {
    this.setupCommands = setupCommands;
    return this;
  }

  public PipelineStep addSetupCommandsItem(PipelineCommand setupCommandsItem) {
    if (this.setupCommands == null) {
      this.setupCommands = new ArrayList<PipelineCommand>();
    }
    this.setupCommands.add(setupCommandsItem);
    return this;
  }

   /**
   * The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.
   * @return setupCommands
  **/
  @Schema(description = "The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.")
  public List<PipelineCommand> getSetupCommands() {
    return setupCommands;
  }

  public void setSetupCommands(List<PipelineCommand> setupCommands) {
    this.setupCommands = setupCommands;
  }

  public PipelineStep scriptCommands(List<PipelineCommand> scriptCommands) {
    this.scriptCommands = scriptCommands;
    return this;
  }

  public PipelineStep addScriptCommandsItem(PipelineCommand scriptCommandsItem) {
    if (this.scriptCommands == null) {
      this.scriptCommands = new ArrayList<PipelineCommand>();
    }
    this.scriptCommands.add(scriptCommandsItem);
    return this;
  }

   /**
   * The list of build commands. These commands are executed in the build container.
   * @return scriptCommands
  **/
  @Schema(description = "The list of build commands. These commands are executed in the build container.")
  public List<PipelineCommand> getScriptCommands() {
    return scriptCommands;
  }

  public void setScriptCommands(List<PipelineCommand> scriptCommands) {
    this.scriptCommands = scriptCommands;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineStep pipelineStep = (PipelineStep) o;
    return Objects.equals(this.uuid, pipelineStep.uuid) &&
        Objects.equals(this.startedOn, pipelineStep.startedOn) &&
        Objects.equals(this.completedOn, pipelineStep.completedOn) &&
        Objects.equals(this.state, pipelineStep.state) &&
        Objects.equals(this.image, pipelineStep.image) &&
        Objects.equals(this.setupCommands, pipelineStep.setupCommands) &&
        Objects.equals(this.scriptCommands, pipelineStep.scriptCommands) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, startedOn, completedOn, state, image, setupCommands, scriptCommands, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineStep {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    setupCommands: ").append(toIndentedString(setupCommands)).append("\n");
    sb.append("    scriptCommands: ").append(toIndentedString(scriptCommands)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
