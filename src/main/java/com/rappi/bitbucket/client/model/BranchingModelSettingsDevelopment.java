/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * BranchingModelSettingsDevelopment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class BranchingModelSettingsDevelopment {
  @JsonProperty("is_valid")
  private Boolean isValid = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("use_mainbranch")
  private Boolean useMainbranch = null;

  public BranchingModelSettingsDevelopment isValid(Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

   /**
   * Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always &#x60;true&#x60; when &#x60;use_mainbranch&#x60; is &#x60;true&#x60; (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.
   * @return isValid
  **/
  @Schema(description = "Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.")
  public Boolean isIsValid() {
    return isValid;
  }

  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }

  public BranchingModelSettingsDevelopment name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The configured branch. It must be &#x60;null&#x60; when &#x60;use_mainbranch&#x60; is &#x60;true&#x60;. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case &#x60;is_valid&#x60; will be &#x60;false&#x60;. The branch must exist when updating/setting the &#x60;name&#x60; or an error will occur.
   * @return name
  **/
  @Schema(description = "The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public BranchingModelSettingsDevelopment useMainbranch(Boolean useMainbranch) {
    this.useMainbranch = useMainbranch;
    return this;
  }

   /**
   * Indicates if the setting points at an explicit branch (&#x60;false&#x60;) or tracks the main branch (&#x60;true&#x60;). When &#x60;true&#x60; the &#x60;name&#x60; must be &#x60;null&#x60; or not provided. When &#x60;false&#x60; the &#x60;name&#x60; must contain a non-empty branch name.
   * @return useMainbranch
  **/
  @Schema(description = "Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.")
  public Boolean isUseMainbranch() {
    return useMainbranch;
  }

  public void setUseMainbranch(Boolean useMainbranch) {
    this.useMainbranch = useMainbranch;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchingModelSettingsDevelopment branchingModelSettingsDevelopment = (BranchingModelSettingsDevelopment) o;
    return Objects.equals(this.isValid, branchingModelSettingsDevelopment.isValid) &&
        Objects.equals(this.name, branchingModelSettingsDevelopment.name) &&
        Objects.equals(this.useMainbranch, branchingModelSettingsDevelopment.useMainbranch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isValid, name, useMainbranch);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchingModelSettingsDevelopment {\n");
    
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    useMainbranch: ").append(toIndentedString(useMainbranch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
