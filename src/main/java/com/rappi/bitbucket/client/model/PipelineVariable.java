/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * PipelineVariable
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class PipelineVariable extends Object {
  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("key")
  private String key = null;

  @JsonProperty("value")
  private String value = null;

  @JsonProperty("secured")
  private Boolean secured = null;

  public PipelineVariable uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The UUID identifying the variable.
   * @return uuid
  **/
  @Schema(description = "The UUID identifying the variable.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public PipelineVariable key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The unique name of the variable.
   * @return key
  **/
  @Schema(description = "The unique name of the variable.")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public PipelineVariable value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The value of the variable. If the variable is secured, this will be empty.
   * @return value
  **/
  @Schema(description = "The value of the variable. If the variable is secured, this will be empty.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public PipelineVariable secured(Boolean secured) {
    this.secured = secured;
    return this;
  }

   /**
   * If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
   * @return secured
  **/
  @Schema(description = "If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.")
  public Boolean isSecured() {
    return secured;
  }

  public void setSecured(Boolean secured) {
    this.secured = secured;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineVariable pipelineVariable = (PipelineVariable) o;
    return Objects.equals(this.uuid, pipelineVariable.uuid) &&
        Objects.equals(this.key, pipelineVariable.key) &&
        Objects.equals(this.value, pipelineVariable.value) &&
        Objects.equals(this.secured, pipelineVariable.secured) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, key, value, secured, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineVariable {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    secured: ").append(toIndentedString(secured)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
