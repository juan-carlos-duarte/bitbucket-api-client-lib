/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The definition of a Docker image that can be used for a Bitbucket Pipelines step execution context.
 */
@Schema(description = "The definition of a Docker image that can be used for a Bitbucket Pipelines step execution context.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class PipelineImage {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("email")
  private String email = null;

  public PipelineImage name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the image. If the image is hosted on DockerHub the short name can be used, otherwise the fully qualified name is required here.
   * @return name
  **/
  @Schema(description = "The name of the image. If the image is hosted on DockerHub the short name can be used, otherwise the fully qualified name is required here.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PipelineImage username(String username) {
    this.username = username;
    return this;
  }

   /**
   * The username needed to authenticate with the Docker registry. Only required when using a private Docker image.
   * @return username
  **/
  @Schema(description = "The username needed to authenticate with the Docker registry. Only required when using a private Docker image.")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public PipelineImage password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password needed to authenticate with the Docker registry. Only required when using a private Docker image.
   * @return password
  **/
  @Schema(description = "The password needed to authenticate with the Docker registry. Only required when using a private Docker image.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public PipelineImage email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The email needed to authenticate with the Docker registry. Only required when using a private Docker image.
   * @return email
  **/
  @Schema(description = "The email needed to authenticate with the Docker registry. Only required when using a private Docker image.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineImage pipelineImage = (PipelineImage) o;
    return Objects.equals(this.name, pipelineImage.name) &&
        Objects.equals(this.username, pipelineImage.username) &&
        Objects.equals(this.password, pipelineImage.password) &&
        Objects.equals(this.email, pipelineImage.email);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, username, password, email);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineImage {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
