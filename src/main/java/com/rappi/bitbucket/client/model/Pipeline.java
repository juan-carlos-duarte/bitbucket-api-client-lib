/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.Account;
import com.rappi.bitbucket.client.model.PipelineState;
import com.rappi.bitbucket.client.model.PipelineTarget;
import com.rappi.bitbucket.client.model.PipelineTrigger;
import com.rappi.bitbucket.client.model.Repository;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;
/**
 * Pipeline
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class Pipeline extends Object {
  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("build_number")
  private Integer buildNumber = null;

  @JsonProperty("creator")
  private Account creator = null;

  @JsonProperty("repository")
  private Repository repository = null;

  @JsonProperty("target")
  private PipelineTarget target = null;

  @JsonProperty("trigger")
  private PipelineTrigger trigger = null;

  @JsonProperty("state")
  private PipelineState state = null;

  @JsonProperty("created_on")
  private OffsetDateTime createdOn = null;

  @JsonProperty("completed_on")
  private OffsetDateTime completedOn = null;

  @JsonProperty("build_seconds_used")
  private Integer buildSecondsUsed = null;

  public Pipeline uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The UUID identifying the pipeline.
   * @return uuid
  **/
  @Schema(description = "The UUID identifying the pipeline.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public Pipeline buildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
    return this;
  }

   /**
   * The build number of the pipeline.
   * @return buildNumber
  **/
  @Schema(description = "The build number of the pipeline.")
  public Integer getBuildNumber() {
    return buildNumber;
  }

  public void setBuildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
  }

  public Pipeline creator(Account creator) {
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @Schema(description = "")
  public Account getCreator() {
    return creator;
  }

  public void setCreator(Account creator) {
    this.creator = creator;
  }

  public Pipeline repository(Repository repository) {
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @Schema(description = "")
  public Repository getRepository() {
    return repository;
  }

  public void setRepository(Repository repository) {
    this.repository = repository;
  }

  public Pipeline target(PipelineTarget target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @Schema(description = "")
  public PipelineTarget getTarget() {
    return target;
  }

  public void setTarget(PipelineTarget target) {
    this.target = target;
  }

  public Pipeline trigger(PipelineTrigger trigger) {
    this.trigger = trigger;
    return this;
  }

   /**
   * Get trigger
   * @return trigger
  **/
  @Schema(description = "")
  public PipelineTrigger getTrigger() {
    return trigger;
  }

  public void setTrigger(PipelineTrigger trigger) {
    this.trigger = trigger;
  }

  public Pipeline state(PipelineState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public PipelineState getState() {
    return state;
  }

  public void setState(PipelineState state) {
    this.state = state;
  }

  public Pipeline createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

   /**
   * The timestamp when the pipeline was created.
   * @return createdOn
  **/
  @Schema(description = "The timestamp when the pipeline was created.")
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }

  public Pipeline completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

   /**
   * The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.
   * @return completedOn
  **/
  @Schema(description = "The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.")
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }

  public Pipeline buildSecondsUsed(Integer buildSecondsUsed) {
    this.buildSecondsUsed = buildSecondsUsed;
    return this;
  }

   /**
   * The number of build seconds used by this pipeline.
   * @return buildSecondsUsed
  **/
  @Schema(description = "The number of build seconds used by this pipeline.")
  public Integer getBuildSecondsUsed() {
    return buildSecondsUsed;
  }

  public void setBuildSecondsUsed(Integer buildSecondsUsed) {
    this.buildSecondsUsed = buildSecondsUsed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pipeline pipeline = (Pipeline) o;
    return Objects.equals(this.uuid, pipeline.uuid) &&
        Objects.equals(this.buildNumber, pipeline.buildNumber) &&
        Objects.equals(this.creator, pipeline.creator) &&
        Objects.equals(this.repository, pipeline.repository) &&
        Objects.equals(this.target, pipeline.target) &&
        Objects.equals(this.trigger, pipeline.trigger) &&
        Objects.equals(this.state, pipeline.state) &&
        Objects.equals(this.createdOn, pipeline.createdOn) &&
        Objects.equals(this.completedOn, pipeline.completedOn) &&
        Objects.equals(this.buildSecondsUsed, pipeline.buildSecondsUsed) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, buildNumber, creator, repository, target, trigger, state, createdOn, completedOn, buildSecondsUsed, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pipeline {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    buildNumber: ").append(toIndentedString(buildNumber)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    buildSecondsUsed: ").append(toIndentedString(buildSecondsUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
