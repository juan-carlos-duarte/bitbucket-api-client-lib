/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.Account;
import com.rappi.bitbucket.client.model.IssueContent;
import com.rappi.bitbucket.client.model.Participant;
import com.rappi.bitbucket.client.model.PullrequestEndpoint;
import com.rappi.bitbucket.client.model.PullrequestLinks;
import com.rappi.bitbucket.client.model.PullrequestMergeCommit;
import com.rappi.bitbucket.client.model.PullrequestRendered;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Pullrequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class Pullrequest extends Object {
  @JsonProperty("links")
  private PullrequestLinks links = null;

  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("rendered")
  private PullrequestRendered rendered = null;

  @JsonProperty("summary")
  private IssueContent summary = null;

  /**
   * The pull request&#x27;s current status.
   */
  public enum StateEnum {
    MERGED("MERGED"),
    SUPERSEDED("SUPERSEDED"),
    OPEN("OPEN"),
    DECLINED("DECLINED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("author")
  private Account author = null;

  @JsonProperty("source")
  private PullrequestEndpoint source = null;

  @JsonProperty("destination")
  private PullrequestEndpoint destination = null;

  @JsonProperty("merge_commit")
  private PullrequestMergeCommit mergeCommit = null;

  @JsonProperty("comment_count")
  private Integer commentCount = null;

  @JsonProperty("task_count")
  private Integer taskCount = null;

  @JsonProperty("close_source_branch")
  private Boolean closeSourceBranch = null;

  @JsonProperty("closed_by")
  private Account closedBy = null;

  @JsonProperty("reason")
  private String reason = null;

  @JsonProperty("created_on")
  private OffsetDateTime createdOn = null;

  @JsonProperty("updated_on")
  private OffsetDateTime updatedOn = null;

  @JsonProperty("reviewers")
  private List<Account> reviewers = null;

  @JsonProperty("participants")
  private List<Participant> participants = null;

  public Pullrequest links(PullrequestLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @Schema(description = "")
  public PullrequestLinks getLinks() {
    return links;
  }

  public void setLinks(PullrequestLinks links) {
    this.links = links;
  }

  public Pullrequest id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The pull request&#x27;s unique ID. Note that pull request IDs are only unique within their associated repository.
   * @return id
  **/
  @Schema(description = "The pull request's unique ID. Note that pull request IDs are only unique within their associated repository.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Pullrequest title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the pull request.
   * @return title
  **/
  @Schema(description = "Title of the pull request.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Pullrequest rendered(PullrequestRendered rendered) {
    this.rendered = rendered;
    return this;
  }

   /**
   * Get rendered
   * @return rendered
  **/
  @Schema(description = "")
  public PullrequestRendered getRendered() {
    return rendered;
  }

  public void setRendered(PullrequestRendered rendered) {
    this.rendered = rendered;
  }

  public Pullrequest summary(IssueContent summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @Schema(description = "")
  public IssueContent getSummary() {
    return summary;
  }

  public void setSummary(IssueContent summary) {
    this.summary = summary;
  }

  public Pullrequest state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The pull request&#x27;s current status.
   * @return state
  **/
  @Schema(description = "The pull request's current status.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public Pullrequest author(Account author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @Schema(description = "")
  public Account getAuthor() {
    return author;
  }

  public void setAuthor(Account author) {
    this.author = author;
  }

  public Pullrequest source(PullrequestEndpoint source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public PullrequestEndpoint getSource() {
    return source;
  }

  public void setSource(PullrequestEndpoint source) {
    this.source = source;
  }

  public Pullrequest destination(PullrequestEndpoint destination) {
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @Schema(description = "")
  public PullrequestEndpoint getDestination() {
    return destination;
  }

  public void setDestination(PullrequestEndpoint destination) {
    this.destination = destination;
  }

  public Pullrequest mergeCommit(PullrequestMergeCommit mergeCommit) {
    this.mergeCommit = mergeCommit;
    return this;
  }

   /**
   * Get mergeCommit
   * @return mergeCommit
  **/
  @Schema(description = "")
  public PullrequestMergeCommit getMergeCommit() {
    return mergeCommit;
  }

  public void setMergeCommit(PullrequestMergeCommit mergeCommit) {
    this.mergeCommit = mergeCommit;
  }

  public Pullrequest commentCount(Integer commentCount) {
    this.commentCount = commentCount;
    return this;
  }

   /**
   * The number of comments for a specific pull request.
   * minimum: 0
   * @return commentCount
  **/
  @Schema(description = "The number of comments for a specific pull request.")
  public Integer getCommentCount() {
    return commentCount;
  }

  public void setCommentCount(Integer commentCount) {
    this.commentCount = commentCount;
  }

  public Pullrequest taskCount(Integer taskCount) {
    this.taskCount = taskCount;
    return this;
  }

   /**
   * The number of open tasks for a specific pull request.
   * minimum: 0
   * @return taskCount
  **/
  @Schema(description = "The number of open tasks for a specific pull request.")
  public Integer getTaskCount() {
    return taskCount;
  }

  public void setTaskCount(Integer taskCount) {
    this.taskCount = taskCount;
  }

  public Pullrequest closeSourceBranch(Boolean closeSourceBranch) {
    this.closeSourceBranch = closeSourceBranch;
    return this;
  }

   /**
   * A boolean flag indicating if merging the pull request closes the source branch.
   * @return closeSourceBranch
  **/
  @Schema(description = "A boolean flag indicating if merging the pull request closes the source branch.")
  public Boolean isCloseSourceBranch() {
    return closeSourceBranch;
  }

  public void setCloseSourceBranch(Boolean closeSourceBranch) {
    this.closeSourceBranch = closeSourceBranch;
  }

  public Pullrequest closedBy(Account closedBy) {
    this.closedBy = closedBy;
    return this;
  }

   /**
   * Get closedBy
   * @return closedBy
  **/
  @Schema(description = "")
  public Account getClosedBy() {
    return closedBy;
  }

  public void setClosedBy(Account closedBy) {
    this.closedBy = closedBy;
  }

  public Pullrequest reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Explains why a pull request was declined. This field is only applicable to pull requests in rejected state.
   * @return reason
  **/
  @Schema(description = "Explains why a pull request was declined. This field is only applicable to pull requests in rejected state.")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public Pullrequest createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

   /**
   * The ISO8601 timestamp the request was created.
   * @return createdOn
  **/
  @Schema(description = "The ISO8601 timestamp the request was created.")
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }

  public Pullrequest updatedOn(OffsetDateTime updatedOn) {
    this.updatedOn = updatedOn;
    return this;
  }

   /**
   * The ISO8601 timestamp the request was last updated.
   * @return updatedOn
  **/
  @Schema(description = "The ISO8601 timestamp the request was last updated.")
  public OffsetDateTime getUpdatedOn() {
    return updatedOn;
  }

  public void setUpdatedOn(OffsetDateTime updatedOn) {
    this.updatedOn = updatedOn;
  }

  public Pullrequest reviewers(List<Account> reviewers) {
    this.reviewers = reviewers;
    return this;
  }

  public Pullrequest addReviewersItem(Account reviewersItem) {
    if (this.reviewers == null) {
      this.reviewers = new ArrayList<Account>();
    }
    this.reviewers.add(reviewersItem);
    return this;
  }

   /**
   * The list of users that were added as reviewers on this pull request when it was created. For performance reasons, the API only includes this list on a pull request&#x27;s &#x60;self&#x60; URL.
   * @return reviewers
  **/
  @Schema(description = "The list of users that were added as reviewers on this pull request when it was created. For performance reasons, the API only includes this list on a pull request's `self` URL.")
  public List<Account> getReviewers() {
    return reviewers;
  }

  public void setReviewers(List<Account> reviewers) {
    this.reviewers = reviewers;
  }

  public Pullrequest participants(List<Participant> participants) {
    this.participants = participants;
    return this;
  }

  public Pullrequest addParticipantsItem(Participant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<Participant>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   *         The list of users that are collaborating on this pull request.         Collaborators are user that:          * are added to the pull request as a reviewer (part of the reviewers           list)         * are not explicit reviewers, but have commented on the pull request         * are not explicit reviewers, but have approved the pull request          Each user is wrapped in an object that indicates the user&#x27;s role and         whether they have approved the pull request. For performance reasons,         the API only returns this list when an API requests a pull request by         id.         
   * @return participants
  **/
  @Schema(description = "        The list of users that are collaborating on this pull request.         Collaborators are user that:          * are added to the pull request as a reviewer (part of the reviewers           list)         * are not explicit reviewers, but have commented on the pull request         * are not explicit reviewers, but have approved the pull request          Each user is wrapped in an object that indicates the user's role and         whether they have approved the pull request. For performance reasons,         the API only returns this list when an API requests a pull request by         id.         ")
  public List<Participant> getParticipants() {
    return participants;
  }

  public void setParticipants(List<Participant> participants) {
    this.participants = participants;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pullrequest pullrequest = (Pullrequest) o;
    return Objects.equals(this.links, pullrequest.links) &&
        Objects.equals(this.id, pullrequest.id) &&
        Objects.equals(this.title, pullrequest.title) &&
        Objects.equals(this.rendered, pullrequest.rendered) &&
        Objects.equals(this.summary, pullrequest.summary) &&
        Objects.equals(this.state, pullrequest.state) &&
        Objects.equals(this.author, pullrequest.author) &&
        Objects.equals(this.source, pullrequest.source) &&
        Objects.equals(this.destination, pullrequest.destination) &&
        Objects.equals(this.mergeCommit, pullrequest.mergeCommit) &&
        Objects.equals(this.commentCount, pullrequest.commentCount) &&
        Objects.equals(this.taskCount, pullrequest.taskCount) &&
        Objects.equals(this.closeSourceBranch, pullrequest.closeSourceBranch) &&
        Objects.equals(this.closedBy, pullrequest.closedBy) &&
        Objects.equals(this.reason, pullrequest.reason) &&
        Objects.equals(this.createdOn, pullrequest.createdOn) &&
        Objects.equals(this.updatedOn, pullrequest.updatedOn) &&
        Objects.equals(this.reviewers, pullrequest.reviewers) &&
        Objects.equals(this.participants, pullrequest.participants) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, title, rendered, summary, state, author, source, destination, mergeCommit, commentCount, taskCount, closeSourceBranch, closedBy, reason, createdOn, updatedOn, reviewers, participants, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pullrequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    rendered: ").append(toIndentedString(rendered)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    mergeCommit: ").append(toIndentedString(mergeCommit)).append("\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    taskCount: ").append(toIndentedString(taskCount)).append("\n");
    sb.append("    closeSourceBranch: ").append(toIndentedString(closeSourceBranch)).append("\n");
    sb.append("    closedBy: ").append(toIndentedString(closedBy)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    updatedOn: ").append(toIndentedString(updatedOn)).append("\n");
    sb.append("    reviewers: ").append(toIndentedString(reviewers)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
