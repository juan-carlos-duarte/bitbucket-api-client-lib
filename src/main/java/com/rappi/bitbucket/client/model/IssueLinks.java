/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.SubjectTypesRepositoryEvents;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * IssueLinks
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class IssueLinks {
  @JsonProperty("self")
  private SubjectTypesRepositoryEvents self = null;

  @JsonProperty("html")
  private SubjectTypesRepositoryEvents html = null;

  @JsonProperty("comments")
  private SubjectTypesRepositoryEvents comments = null;

  @JsonProperty("attachments")
  private SubjectTypesRepositoryEvents attachments = null;

  @JsonProperty("watch")
  private SubjectTypesRepositoryEvents watch = null;

  @JsonProperty("vote")
  private SubjectTypesRepositoryEvents vote = null;

  public IssueLinks self(SubjectTypesRepositoryEvents self) {
    this.self = self;
    return this;
  }

   /**
   * Get self
   * @return self
  **/
  @Schema(description = "")
  public SubjectTypesRepositoryEvents getSelf() {
    return self;
  }

  public void setSelf(SubjectTypesRepositoryEvents self) {
    this.self = self;
  }

  public IssueLinks html(SubjectTypesRepositoryEvents html) {
    this.html = html;
    return this;
  }

   /**
   * Get html
   * @return html
  **/
  @Schema(description = "")
  public SubjectTypesRepositoryEvents getHtml() {
    return html;
  }

  public void setHtml(SubjectTypesRepositoryEvents html) {
    this.html = html;
  }

  public IssueLinks comments(SubjectTypesRepositoryEvents comments) {
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @Schema(description = "")
  public SubjectTypesRepositoryEvents getComments() {
    return comments;
  }

  public void setComments(SubjectTypesRepositoryEvents comments) {
    this.comments = comments;
  }

  public IssueLinks attachments(SubjectTypesRepositoryEvents attachments) {
    this.attachments = attachments;
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @Schema(description = "")
  public SubjectTypesRepositoryEvents getAttachments() {
    return attachments;
  }

  public void setAttachments(SubjectTypesRepositoryEvents attachments) {
    this.attachments = attachments;
  }

  public IssueLinks watch(SubjectTypesRepositoryEvents watch) {
    this.watch = watch;
    return this;
  }

   /**
   * Get watch
   * @return watch
  **/
  @Schema(description = "")
  public SubjectTypesRepositoryEvents getWatch() {
    return watch;
  }

  public void setWatch(SubjectTypesRepositoryEvents watch) {
    this.watch = watch;
  }

  public IssueLinks vote(SubjectTypesRepositoryEvents vote) {
    this.vote = vote;
    return this;
  }

   /**
   * Get vote
   * @return vote
  **/
  @Schema(description = "")
  public SubjectTypesRepositoryEvents getVote() {
    return vote;
  }

  public void setVote(SubjectTypesRepositoryEvents vote) {
    this.vote = vote;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueLinks issueLinks = (IssueLinks) o;
    return Objects.equals(this.self, issueLinks.self) &&
        Objects.equals(this.html, issueLinks.html) &&
        Objects.equals(this.comments, issueLinks.comments) &&
        Objects.equals(this.attachments, issueLinks.attachments) &&
        Objects.equals(this.watch, issueLinks.watch) &&
        Objects.equals(this.vote, issueLinks.vote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(self, html, comments, attachments, watch, vote);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueLinks {\n");
    
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    watch: ").append(toIndentedString(watch)).append("\n");
    sb.append("    vote: ").append(toIndentedString(vote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
