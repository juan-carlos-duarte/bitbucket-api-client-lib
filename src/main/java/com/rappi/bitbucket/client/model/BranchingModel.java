/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rappi.bitbucket.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.rappi.bitbucket.client.model.BranchingModelBranchTypes;
import com.rappi.bitbucket.client.model.BranchingModelDevelopment;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * BranchingModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-12T14:05:09.453-06:00[America/Mexico_City]")
public class BranchingModel extends Object {
  @JsonProperty("branch_types")
  private List<BranchingModelBranchTypes> branchTypes = null;

  @JsonProperty("development")
  private BranchingModelDevelopment development = null;

  @JsonProperty("production")
  private BranchingModelDevelopment production = null;

  public BranchingModel branchTypes(List<BranchingModelBranchTypes> branchTypes) {
    this.branchTypes = branchTypes;
    return this;
  }

  public BranchingModel addBranchTypesItem(BranchingModelBranchTypes branchTypesItem) {
    if (this.branchTypes == null) {
      this.branchTypes = new ArrayList<BranchingModelBranchTypes>();
    }
    this.branchTypes.add(branchTypesItem);
    return this;
  }

   /**
   * The active branch types.
   * @return branchTypes
  **/
  @Schema(description = "The active branch types.")
  public List<BranchingModelBranchTypes> getBranchTypes() {
    return branchTypes;
  }

  public void setBranchTypes(List<BranchingModelBranchTypes> branchTypes) {
    this.branchTypes = branchTypes;
  }

  public BranchingModel development(BranchingModelDevelopment development) {
    this.development = development;
    return this;
  }

   /**
   * Get development
   * @return development
  **/
  @Schema(description = "")
  public BranchingModelDevelopment getDevelopment() {
    return development;
  }

  public void setDevelopment(BranchingModelDevelopment development) {
    this.development = development;
  }

  public BranchingModel production(BranchingModelDevelopment production) {
    this.production = production;
    return this;
  }

   /**
   * Get production
   * @return production
  **/
  @Schema(description = "")
  public BranchingModelDevelopment getProduction() {
    return production;
  }

  public void setProduction(BranchingModelDevelopment production) {
    this.production = production;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchingModel branchingModel = (BranchingModel) o;
    return Objects.equals(this.branchTypes, branchingModel.branchTypes) &&
        Objects.equals(this.development, branchingModel.development) &&
        Objects.equals(this.production, branchingModel.production) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchTypes, development, production, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchingModel {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    branchTypes: ").append(toIndentedString(branchTypes)).append("\n");
    sb.append("    development: ").append(toIndentedString(development)).append("\n");
    sb.append("    production: ").append(toIndentedString(production)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
